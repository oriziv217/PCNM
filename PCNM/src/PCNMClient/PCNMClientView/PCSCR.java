package PCNMClient.PCNMClientView;

import PCNMClient.PCNMClientController.PCCTRL;
import static PCNMClient.PCNMClientView.WindowMustHave.showDialog;
import java.awt.Font;
import java.awt.Window;
import java.io.IOException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Date;
import javax.swing.JFrame;
import javax.swing.ListSelectionModel;
import javax.swing.SwingUtilities;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.table.DefaultTableModel;

/**
 * This class implements the PC search screen
 * @author ori ziv
 */
public class PCSCR extends javax.swing.JPanel {

    private int fltrInstalDateMode;
    private int fltrWarrentymode;
    private int fltrStatus;
    private Date fltrInstalDate;
    private boolean[] selectedComponents;
    private boolean[] selectedPCSpecs;
    private ArrayList<String> compEnaList;
    private ArrayList<String> specEnaList;
    private int compRowCounter;
    private int specRowCounter;
    private String[][] compTableContent;
    private String[][] specTableContent;
    boolean doneInit;
    
    /**
     * Creates new form PCSCR
     */
    public PCSCR() {
        doneInit = false;
        initComponents();
        fltrInstalDateMode = 0;
        fltrWarrentymode = 0;
        fltrStatus = 0;
        fltrInstalDate = null;
        doneInit = true;
    }

    /**
     * This constructor utilize the default constructor and then load content into the screen's forms
     * @param compEnaList
     * @param specEnaList
     */
    public PCSCR(ArrayList<String> compEnaList, ArrayList<String> specEnaList) {
        this();
        doneInit = false;
        selectedComponents = new boolean[compEnaList.size()];
        selectedPCSpecs = new boolean[specEnaList.size()];
        Arrays.fill(selectedComponents, false);
        Arrays.fill(selectedPCSpecs, false);
        this.compEnaList = compEnaList;
        compRowCounter = compEnaList.size();
        compTableContent = new String[compRowCounter][6];
        this.specEnaList = specEnaList;
        specRowCounter = specEnaList.size();
        specTableContent = new String[specRowCounter][7];
        loadCompTable();
        loadSpecTable();
        doneInit = true;
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblScreenTitle = new javax.swing.JLabel();
        lblNoFilter = new javax.swing.JLabel();
        lblSearchName = new javax.swing.JLabel();
        lblSearchDescription = new javax.swing.JLabel();
        lblSearchInstalDate = new javax.swing.JLabel();
        lblSearchStatus = new javax.swing.JLabel();
        lblSearchWarrentyDate = new javax.swing.JLabel();
        txtName = new javax.swing.JTextField();
        txtDescription = new javax.swing.JTextField();
        cmbInstalDate = new javax.swing.JComboBox();
        cmbWarrenty = new javax.swing.JComboBox();
        cmbStatus = new javax.swing.JComboBox();
        dtpInstalDate = new org.jdesktop.swingx.JXDatePicker();
        btnSearch = new javax.swing.JButton();
        btnOpenPCCompSCR = new javax.swing.JButton();
        btnClear = new javax.swing.JButton();
        btnClose = new javax.swing.JButton();
        btnQuit = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblComponents = new javax.swing.JTable();
        lblSearchComp = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblSpecs = new javax.swing.JTable();
        lblSearchSpecs = new javax.swing.JLabel();
        btnOpenPCSpecSCR = new javax.swing.JButton();

        setBackground(java.awt.Color.white);
        setMinimumSize(new java.awt.Dimension(1425, 820));
        setPreferredSize(new java.awt.Dimension(1350, 780));

        lblScreenTitle.setFont(new java.awt.Font("Times New Roman", 1, 48)); // NOI18N
        lblScreenTitle.setForeground(java.awt.Color.red);
        lblScreenTitle.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblScreenTitle.setText("Search For PCs");
        lblScreenTitle.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        lblScreenTitle.setName("lblScreenTitle"); // NOI18N

        lblNoFilter.setBackground(java.awt.Color.white);
        lblNoFilter.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        lblNoFilter.setForeground(java.awt.Color.red);
        lblNoFilter.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblNoFilter.setText("Fill the following fields in order to apply a search filter. Leave text fields empty for all PCs");

        lblSearchName.setBackground(java.awt.Color.white);
        lblSearchName.setFont(new java.awt.Font("Times New Roman", 0, 24)); // NOI18N
        lblSearchName.setText("PC name:");

        lblSearchDescription.setBackground(java.awt.Color.white);
        lblSearchDescription.setFont(new java.awt.Font("Times New Roman", 0, 24)); // NOI18N
        lblSearchDescription.setText("PC description:");

        lblSearchInstalDate.setBackground(java.awt.Color.white);
        lblSearchInstalDate.setFont(new java.awt.Font("Times New Roman", 0, 24)); // NOI18N
        lblSearchInstalDate.setText("Installation date:");

        lblSearchStatus.setBackground(java.awt.Color.white);
        lblSearchStatus.setFont(new java.awt.Font("Times New Roman", 0, 24)); // NOI18N
        lblSearchStatus.setText("PC status:");

        lblSearchWarrentyDate.setBackground(java.awt.Color.white);
        lblSearchWarrentyDate.setFont(new java.awt.Font("Times New Roman", 0, 24)); // NOI18N
        lblSearchWarrentyDate.setText("Warrenty expiration:");

        txtName.setFont(new java.awt.Font("Times New Roman", 0, 24)); // NOI18N

        txtDescription.setFont(new java.awt.Font("Times New Roman", 0, 24)); // NOI18N

        cmbInstalDate.setFont(new java.awt.Font("Times New Roman", 0, 24)); // NOI18N
        cmbInstalDate.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "All", "Installed After", "Installed Before" }));
        cmbInstalDate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbInstalDateActionPerformed(evt);
            }
        });

        cmbWarrenty.setFont(new java.awt.Font("Times New Roman", 0, 24)); // NOI18N
        cmbWarrenty.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "All", "Active Only", "Expired Only" }));
        cmbWarrenty.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbWarrentyActionPerformed(evt);
            }
        });

        cmbStatus.setFont(new java.awt.Font("Times New Roman", 0, 24)); // NOI18N
        cmbStatus.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Any Status", "Enabled", "Disabled", "Suspended" }));
        cmbStatus.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbStatusActionPerformed(evt);
            }
        });

        dtpInstalDate.setEnabled(false);
        dtpInstalDate.setFont(new java.awt.Font("Times New Roman", 0, 24)); // NOI18N
        dtpInstalDate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dtpInstalDateActionPerformed(evt);
            }
        });

        btnSearch.setFont(new java.awt.Font("Times New Roman", 1, 24)); // NOI18N
        btnSearch.setText("Search");
        btnSearch.setToolTipText("Search Workstations");
        btnSearch.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        btnSearch.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        btnSearch.setInheritsPopupMenu(true);
        btnSearch.setMaximumSize(new java.awt.Dimension(280, 33));
        btnSearch.setMinimumSize(new java.awt.Dimension(280, 33));
        btnSearch.setName("btnSearch"); // NOI18N
        btnSearch.setPreferredSize(new java.awt.Dimension(280, 33));
        btnSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchActionPerformed(evt);
            }
        });

        btnOpenPCCompSCR.setFont(new java.awt.Font("Times New Roman", 1, 24)); // NOI18N
        btnOpenPCCompSCR.setText("Manage Components");
        btnOpenPCCompSCR.setToolTipText("Search Workstations");
        btnOpenPCCompSCR.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        btnOpenPCCompSCR.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        btnOpenPCCompSCR.setInheritsPopupMenu(true);
        btnOpenPCCompSCR.setName("btnOpenPCCompSCR"); // NOI18N
        btnOpenPCCompSCR.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnOpenPCCompSCRActionPerformed(evt);
            }
        });

        btnClear.setFont(new java.awt.Font("Times New Roman", 1, 24)); // NOI18N
        btnClear.setText("Clear");
        btnClear.setToolTipText("Search Workstations");
        btnClear.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        btnClear.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        btnClear.setInheritsPopupMenu(true);
        btnClear.setMaximumSize(new java.awt.Dimension(280, 33));
        btnClear.setMinimumSize(new java.awt.Dimension(280, 33));
        btnClear.setName("btnSearchByComp"); // NOI18N
        btnClear.setPreferredSize(new java.awt.Dimension(280, 33));
        btnClear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnClearActionPerformed(evt);
            }
        });

        btnClose.setFont(new java.awt.Font("Times New Roman", 1, 24)); // NOI18N
        btnClose.setForeground(java.awt.Color.red);
        btnClose.setToolTipText("Close screen and return to Network Mapping screen");
        btnClose.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        btnClose.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        btnClose.setInheritsPopupMenu(true);
        btnClose.setLabel("Close");
        btnClose.setName("btnClose"); // NOI18N
        btnClose.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCloseActionPerformed(evt);
            }
        });

        btnQuit.setFont(new java.awt.Font("Times New Roman", 1, 24)); // NOI18N
        btnQuit.setForeground(java.awt.Color.red);
        btnQuit.setText("Quit");
        btnQuit.setToolTipText("Quit PCNM");
        btnQuit.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        btnQuit.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        btnQuit.setInheritsPopupMenu(true);
        btnQuit.setName("btnQuit"); // NOI18N
        btnQuit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnQuitActionPerformed(evt);
            }
        });

        tblComponents.setAutoCreateRowSorter(true);
        tblComponents.setFont(new java.awt.Font("Times New Roman", 0, 24)); // NOI18N
        tblComponents.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "Name", "Description"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblComponents.setRowHeight(32);
        jScrollPane1.setViewportView(tblComponents);
        if (tblComponents.getColumnModel().getColumnCount() > 0) {
            tblComponents.getColumnModel().getColumn(0).setMinWidth(200);
            tblComponents.getColumnModel().getColumn(0).setPreferredWidth(200);
            tblComponents.getColumnModel().getColumn(1).setMinWidth(400);
            tblComponents.getColumnModel().getColumn(1).setPreferredWidth(400);
        }
        tblComponents.getTableHeader().setFont(new Font("Times New Roman", Font.BOLD, 24));
        tblComponents.getSelectionModel().setSelectionMode(ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);
        tblComponents.getSelectionModel().addListSelectionListener(tblComponentsListListener);

        lblSearchComp.setBackground(java.awt.Color.white);
        lblSearchComp.setFont(new java.awt.Font("Times New Roman", 0, 24)); // NOI18N
        lblSearchComp.setText("PC Components:");

        tblSpecs.setAutoCreateRowSorter(true);
        tblSpecs.setFont(new java.awt.Font("Times New Roman", 0, 24)); // NOI18N
        tblSpecs.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "Name", "Description"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblSpecs.setRowHeight(32);
        jScrollPane2.setViewportView(tblSpecs);
        if (tblSpecs.getColumnModel().getColumnCount() > 0) {
            tblSpecs.getColumnModel().getColumn(0).setMinWidth(200);
            tblSpecs.getColumnModel().getColumn(0).setPreferredWidth(200);
            tblSpecs.getColumnModel().getColumn(1).setMinWidth(400);
            tblSpecs.getColumnModel().getColumn(1).setPreferredWidth(400);
        }
        tblSpecs.getTableHeader().setFont(new Font("Times New Roman", Font.BOLD, 24));
        tblSpecs.getSelectionModel().setSelectionMode(ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);
        tblSpecs.getSelectionModel().addListSelectionListener(tblSpecsListListener);

        lblSearchSpecs.setBackground(java.awt.Color.white);
        lblSearchSpecs.setFont(new java.awt.Font("Times New Roman", 0, 24)); // NOI18N
        lblSearchSpecs.setText("PC Specifications:");

        btnOpenPCSpecSCR.setFont(new java.awt.Font("Times New Roman", 1, 24)); // NOI18N
        btnOpenPCSpecSCR.setText("Manage Specifications");
        btnOpenPCSpecSCR.setToolTipText("Search Workstations");
        btnOpenPCSpecSCR.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        btnOpenPCSpecSCR.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        btnOpenPCSpecSCR.setInheritsPopupMenu(true);
        btnOpenPCSpecSCR.setName("btnSearchByFilter"); // NOI18N
        btnOpenPCSpecSCR.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnOpenPCSpecSCRActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblNoFilter, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(lblScreenTitle, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(lblSearchInstalDate)
                                            .addComponent(lblSearchName))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(cmbInstalDate, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(dtpInstalDate, javax.swing.GroupLayout.PREFERRED_SIZE, 201, javax.swing.GroupLayout.PREFERRED_SIZE))
                                            .addComponent(txtName)))
                                    .addComponent(lblSearchComp)
                                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 579, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(39, 39, 39)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addGroup(layout.createSequentialGroup()
                                            .addComponent(lblSearchDescription)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                            .addComponent(txtDescription))
                                        .addGroup(layout.createSequentialGroup()
                                            .addComponent(lblSearchWarrentyDate)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                            .addComponent(cmbWarrenty, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addGap(18, 18, 18)
                                            .addComponent(lblSearchStatus)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                            .addComponent(cmbStatus, javax.swing.GroupLayout.PREFERRED_SIZE, 201, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 772, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(lblSearchSpecs)))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(btnClose, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnSearch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnClear, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnOpenPCCompSCR, javax.swing.GroupLayout.PREFERRED_SIZE, 280, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnOpenPCSpecSCR, javax.swing.GroupLayout.PREFERRED_SIZE, 280, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnQuit, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 8, Short.MAX_VALUE)))
                .addContainerGap(17, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblScreenTitle)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblNoFilter)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(lblSearchName)
                        .addComponent(txtName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(lblSearchDescription))
                    .addComponent(txtDescription, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(15, 15, 15)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblSearchInstalDate)
                            .addComponent(cmbInstalDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(dtpInstalDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addComponent(lblSearchComp)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(lblSearchWarrentyDate)
                                    .addComponent(cmbWarrenty, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addComponent(lblSearchSpecs)
                                .addGap(11, 11, 11))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(lblSearchStatus)
                                    .addComponent(cmbStatus, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(61, 61, 61)))
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnClose, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnQuit, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnClear, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnOpenPCCompSCR, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnOpenPCSpecSCR, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(63, Short.MAX_VALUE))
        );

        if (PCCTRL.getNameFilter() != null)
        txtName.setText(PCCTRL.getNameFilter());
        if (PCCTRL.getDescriptionFilter() != null)
        txtName.setText(PCCTRL.getDescriptionFilter());
        cmbInstalDate.setSelectedIndex(PCCTRL.getInstallationDateModeFilter());
        if (PCCTRL.getInstallationDateModeFilter() > 0)
        dtpInstalDate.setEnabled(true);
        else
        dtpInstalDate.setEnabled(false);
        cmbWarrenty.setSelectedIndex(PCCTRL.getWarrentyModeFilter());
        cmbStatus.setSelectedIndex(PCCTRL.getStatusFilter());
        dtpInstalDate.setFormats(new SimpleDateFormat( "dd/MM/yyyy" ));
        if (PCCTRL.getInstalationDateFilter() != null)
        dtpInstalDate.setDate(PCCTRL.getInstalationDateFilter());
    }// </editor-fold>//GEN-END:initComponents

    private void cmbInstalDateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbInstalDateActionPerformed
        if (!doneInit) return;
        fltrInstalDateMode = cmbInstalDate.getSelectedIndex();
        if (fltrInstalDateMode == -1) return;
        if (fltrInstalDateMode == 0) dtpInstalDate.setEnabled(false);
        else dtpInstalDate.setEnabled(true);
    }//GEN-LAST:event_cmbInstalDateActionPerformed

    private void cmbWarrentyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbWarrentyActionPerformed
        if (!doneInit) return;
        fltrWarrentymode = cmbWarrenty.getSelectedIndex();
    }//GEN-LAST:event_cmbWarrentyActionPerformed

    private void btnSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchActionPerformed
        putFilters();
        try {
            PCCTRL.searchBtnPressed();
        } catch (IOException ex) {
            showDialog(this, "Lost Connection with the server", DialogType.ERROR);
            System.exit(0);
        }
    }//GEN-LAST:event_btnSearchActionPerformed

    private void btnOpenPCCompSCRActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnOpenPCCompSCRActionPerformed
        putFilters();
        Window window = SwingUtilities.getWindowAncestor(this);
        JFrame frame = (JFrame) window;
        frame.setTitle("PCNM - Manage PC components");
        PCCTRL.openPCCompSCRBtnPressed();
    }//GEN-LAST:event_btnOpenPCCompSCRActionPerformed

    private void btnClearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnClearActionPerformed
        clearFilters();
        PCCTRL.openPCSCR();
    }//GEN-LAST:event_btnClearActionPerformed

    private void btnCloseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCloseActionPerformed
        Window window = SwingUtilities.getWindowAncestor(this);
        JFrame frame = (JFrame) window;
        frame.setTitle("PCNM - Network Mapping");
        PCCTRL.closeBtnPressed();
    }//GEN-LAST:event_btnCloseActionPerformed

    private void btnQuitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnQuitActionPerformed
        PCCTRL.QuitBtnPressed();
    }//GEN-LAST:event_btnQuitActionPerformed

    private void dtpInstalDateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dtpInstalDateActionPerformed
        if (!doneInit) return;
        fltrInstalDate = dtpInstalDate.getDate();
    }//GEN-LAST:event_dtpInstalDateActionPerformed

    private void cmbStatusActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbStatusActionPerformed
        if (!doneInit) return;
        fltrStatus = cmbStatus.getSelectedIndex();
    }//GEN-LAST:event_cmbStatusActionPerformed

    private void btnOpenPCSpecSCRActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnOpenPCSpecSCRActionPerformed
        Window window = SwingUtilities.getWindowAncestor(this);
        JFrame frame = (JFrame) window;
        frame.setTitle("PCNM - Manage PC Specifications");
        PCCTRL.openPCSpecSCRBtnPressed();
    }//GEN-LAST:event_btnOpenPCSpecSCRActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnClear;
    private javax.swing.JButton btnClose;
    private javax.swing.JButton btnOpenPCCompSCR;
    private javax.swing.JButton btnOpenPCSpecSCR;
    private javax.swing.JButton btnQuit;
    private javax.swing.JButton btnSearch;
    private javax.swing.JComboBox cmbInstalDate;
    private javax.swing.JComboBox cmbStatus;
    private javax.swing.JComboBox cmbWarrenty;
    private org.jdesktop.swingx.JXDatePicker dtpInstalDate;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel lblNoFilter;
    private javax.swing.JLabel lblScreenTitle;
    private javax.swing.JLabel lblSearchComp;
    private javax.swing.JLabel lblSearchDescription;
    private javax.swing.JLabel lblSearchInstalDate;
    private javax.swing.JLabel lblSearchName;
    private javax.swing.JLabel lblSearchSpecs;
    private javax.swing.JLabel lblSearchStatus;
    private javax.swing.JLabel lblSearchWarrentyDate;
    private javax.swing.JTable tblComponents;
    private javax.swing.JTable tblSpecs;
    private javax.swing.JTextField txtDescription;
    private javax.swing.JTextField txtName;
    // End of variables declaration//GEN-END:variables

    private void putFilters() {
        PCCTRL.setNameFilter(txtName.getText());
        PCCTRL.setDescriptionFilter(txtDescription.getText());
        PCCTRL.setInstallationDateModeFilter(cmbInstalDate.getSelectedIndex());
        PCCTRL.setInstalationDateFilter(dtpInstalDate.getDate());
        PCCTRL.setWarrentyModeFilter(cmbWarrenty.getSelectedIndex());
        PCCTRL.setStatusFilter(cmbStatus.getSelectedIndex());
        PCCTRL.setSelectedComponentsFilter(selectedComponents);
        PCCTRL.setSelectedSpecsFilter(selectedPCSpecs);
    }
    
    private void clearFilters() {
        PCCTRL.setNameFilter("");
        PCCTRL.setDescriptionFilter("");
        PCCTRL.setInstallationDateModeFilter(0);
        PCCTRL.setInstalationDateFilter(null);
        PCCTRL.setWarrentyModeFilter(0);
        PCCTRL.setStatusFilter(0);
        PCCTRL.setSelectedComponentsFilter(null);
        PCCTRL.setSelectedSpecsFilter(null);
    }
    
    private ListSelectionListener tblComponentsListListener = new ListSelectionListener() {
        @Override
        public void valueChanged(ListSelectionEvent lse) {
            if (!doneInit || lse.getValueIsAdjusting()) return;
            ListSelectionModel lsm = (ListSelectionModel)lse.getSource();
            if (lsm.isSelectionEmpty())
                return;
            Arrays.fill(selectedComponents, false);
            int minIndex = lsm.getMinSelectionIndex();
            int maxIndex = lsm.getMaxSelectionIndex();
            DefaultTableModel dtm = (DefaultTableModel)tblComponents.getModel();
            for (int i = minIndex ; i <= maxIndex ; i ++) {
                if (lsm.isSelectedIndex(i)) {
                    String name = (String)dtm.getValueAt(tblComponents.convertRowIndexToModel(i), 0);
                    for (int j = 0 ; j < compTableContent.length ; j ++) {
                        if (compTableContent[j][1].equals(name)) {
                            selectedComponents[j] = true;
                            j = compTableContent.length;
                        }
                    }
                }
            }
        }
    };
    
    private ListSelectionListener tblSpecsListListener = new ListSelectionListener() {
        @Override
        public void valueChanged(ListSelectionEvent lse) {
            if (!doneInit || lse.getValueIsAdjusting()) return;
            ListSelectionModel lsm = (ListSelectionModel)lse.getSource();
            if (lsm.isSelectionEmpty())
                return;
            Arrays.fill(selectedPCSpecs, false);
            int minIndex = lsm.getMinSelectionIndex();
            int maxIndex = lsm.getMaxSelectionIndex();
            DefaultTableModel dtm = (DefaultTableModel)tblSpecs.getModel();
            for (int i = minIndex ; i <= maxIndex ; i ++) {
                if (lsm.isSelectedIndex(i)) {
                    String name = (String)dtm.getValueAt(tblSpecs.convertRowIndexToModel(i), 0);
                    for (int j = 0 ; j < specTableContent.length ; j ++) {
                        if (specTableContent[j][1].equals(name)) {
                            selectedPCSpecs[j] = true;
                            j = specTableContent.length;
                        }
                    }
                }
            }
        }
    };

    private void loadCompTable() {
        String row;
        DefaultTableModel dtm = (DefaultTableModel)tblComponents.getModel();
        dtm.setRowCount(compRowCounter);
        for (int i = 0 ; i < compEnaList.size() ; i ++) {
            row = compEnaList.get(i);
            compTableContent[i] = row.split(",");
            dtm.setValueAt(compTableContent[i][1], i, 0);
            dtm.setValueAt(compTableContent[i][2], i, 1);
        }
    }

    private void loadSpecTable() {
        String row;
        DefaultTableModel dtm = (DefaultTableModel)tblSpecs.getModel();
        dtm.setRowCount(specRowCounter);
        for (int i = 0 ; i < specEnaList.size() ; i ++) {
            row = specEnaList.get(i);
            specTableContent[i] = row.split(",");
            dtm.setValueAt(specTableContent[i][1], i, 0);
            dtm.setValueAt(specTableContent[i][2], i, 1);
        }
    }
}
