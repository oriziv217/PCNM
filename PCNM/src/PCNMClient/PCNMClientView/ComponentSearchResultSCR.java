package PCNMClient.PCNMClientView;

import java.util.ArrayList;

/**
 *
 * @author Ori Ziv
 */
public class ComponentSearchResultSCR extends javax.swing.JPanel {

    /**
     * Creates new form ComponentSearchResultSCR
     */
    public ComponentSearchResultSCR() {
        initComponents();
    }

    public ComponentSearchResultSCR(ArrayList<String> ws_tbl) {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblResultsTitle = new javax.swing.JLabel();
        lblResultFilterBy = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblSearchResault = new javax.swing.JTable();
        cmbFltrField = new javax.swing.JComboBox();
        lblFilterStr = new javax.swing.JLabel();
        txtFilterStr = new javax.swing.JTextField();
        chbEnabledOnly = new javax.swing.JCheckBox();
        lblImportanceFilter = new javax.swing.JLabel();
        cmbMoreLess = new javax.swing.JComboBox();
        spnPrice = new javax.swing.JSpinner();
        lblImportanceFilter1 = new javax.swing.JLabel();
        cmbMoreLessValAdd = new javax.swing.JComboBox();
        spnValAd = new javax.swing.JSpinner();

        FormListener formListener = new FormListener();

        setBackground(java.awt.Color.white);
        setMinimumSize(new java.awt.Dimension(1442, 818));

        lblResultsTitle.setBackground(java.awt.Color.white);
        lblResultsTitle.setFont(new java.awt.Font("Times New Roman", 1, 48)); // NOI18N
        lblResultsTitle.setForeground(java.awt.Color.red);
        lblResultsTitle.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblResultsTitle.setText("Components Search Results");

        lblResultFilterBy.setBackground(java.awt.Color.white);
        lblResultFilterBy.setFont(new java.awt.Font("Times New Roman", 0, 24)); // NOI18N
        lblResultFilterBy.setText("Filter By:");

        tblSearchResault.setAutoCreateRowSorter(true);
        tblSearchResault.setFont(new java.awt.Font("Times New Roman", 0, 24)); // NOI18N
        tblSearchResault.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Name", "Description", "Price", "Value Add", "Status"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.Float.class, java.lang.Float.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblSearchResault.setRowHeight(32);
        tblSearchResault.setSelectionMode();
        jScrollPane1.setViewportView(tblSearchResault);
        if (tblSearchResault.getColumnModel().getColumnCount() > 0) {
            tblSearchResault.getColumnModel().getColumn(0).setPreferredWidth(120);
            tblSearchResault.getColumnModel().getColumn(1).setPreferredWidth(250);
            tblSearchResault.getColumnModel().getColumn(2).setPreferredWidth(80);
            tblSearchResault.getColumnModel().getColumn(3).setPreferredWidth(80);
            tblSearchResault.getColumnModel().getColumn(4).setPreferredWidth(120);
        }
        tblSearchResault.getTableHeader().setFont(new Font("Times New Roman", Font.BOLD, 24));

        cmbFltrField.setFont(new java.awt.Font("Times New Roman", 0, 24)); // NOI18N
        cmbFltrField.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Show All", "Workstation Name", "Workstation Description" }));
        cmbFltrField.addActionListener(formListener);

        lblFilterStr.setFont(new java.awt.Font("Times New Roman", 0, 24)); // NOI18N
        lblFilterStr.setText("Filter String:");

        txtFilterStr.setFont(new java.awt.Font("Times New Roman", 0, 24)); // NOI18N
        txtFilterStr.addFocusListener(formListener);
        txtFilterStr.addActionListener(formListener);

        chbEnabledOnly.setFont(new java.awt.Font("Times New Roman", 0, 24)); // NOI18N
        chbEnabledOnly.setText("Show Enabled Only");
        chbEnabledOnly.addActionListener(formListener);

        lblImportanceFilter.setFont(new java.awt.Font("Times New Roman", 0, 24)); // NOI18N
        lblImportanceFilter.setText("Price Filter:");

        cmbMoreLess.setFont(new java.awt.Font("Times New Roman", 0, 24)); // NOI18N
        cmbMoreLess.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "All", "More Then", "Less Then" }));
        cmbMoreLess.addActionListener(formListener);

        spnPrice.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        spnPrice.setModel(new javax.swing.SpinnerNumberModel(0.0f, 0.0f, null, 1.0f));
        spnPrice.setEnabled(false);

        lblImportanceFilter1.setFont(new java.awt.Font("Times New Roman", 0, 24)); // NOI18N
        lblImportanceFilter1.setText("Value Add Filter:");

        cmbMoreLessValAdd.setFont(new java.awt.Font("Times New Roman", 0, 24)); // NOI18N
        cmbMoreLessValAdd.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "All", "More Then", "Less Then" }));
        cmbMoreLessValAdd.addActionListener(formListener);

        spnValAd.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        spnValAd.setModel(new javax.swing.SpinnerNumberModel(1.0d, 0.1d, 1.9d, 0.1d));
        spnValAd.setEnabled(false);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(lblResultsTitle, javax.swing.GroupLayout.DEFAULT_SIZE, 1442, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(lblResultFilterBy)
                        .addGap(18, 18, 18)
                        .addComponent(cmbFltrField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(lblFilterStr)
                        .addGap(18, 18, 18)
                        .addComponent(txtFilterStr)
                        .addContainerGap())
                    .addComponent(jScrollPane1)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(lblImportanceFilter)
                        .addGap(18, 18, 18)
                        .addComponent(cmbMoreLess, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(spnPrice)
                        .addGap(18, 18, 18)
                        .addComponent(lblImportanceFilter1)
                        .addGap(18, 18, 18)
                        .addComponent(cmbMoreLessValAdd, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(spnValAd)
                        .addGap(18, 18, 18)
                        .addComponent(chbEnabledOnly)
                        .addGap(94, 94, 94))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblResultsTitle)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblResultFilterBy)
                    .addComponent(cmbFltrField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblFilterStr)
                    .addComponent(txtFilterStr, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(lblImportanceFilter)
                        .addComponent(cmbMoreLess, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(spnPrice, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(lblImportanceFilter1)
                        .addComponent(cmbMoreLessValAdd, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(spnValAd, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(chbEnabledOnly)))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 505, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(128, Short.MAX_VALUE))
        );

        cmbMoreLess.setSelectedIndex(ComponentCTRL.getPriceCmb());
        spnPrice.setValue(ComponentCTRL.getPriceFilter());
        cmbMoreLessValAdd.setSelectedIndex(ComponentCTRL.getValAddCmb());
        spnValAd.setValue(ComponentCTRL.getValAddFilter());
    }

    // Code for dispatching events from components to event handlers.

    private class FormListener implements java.awt.event.ActionListener, java.awt.event.FocusListener {
        FormListener() {}
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            if (evt.getSource() == cmbFltrField) {
                ComponentSearchResultSCR.this.cmbFltrFieldActionPerformed(evt);
            }
            else if (evt.getSource() == txtFilterStr) {
                ComponentSearchResultSCR.this.txtFilterStrActionPerformed(evt);
            }
            else if (evt.getSource() == chbEnabledOnly) {
                ComponentSearchResultSCR.this.chbEnabledOnlyActionPerformed(evt);
            }
            else if (evt.getSource() == cmbMoreLess) {
                ComponentSearchResultSCR.this.cmbMoreLessActionPerformed(evt);
            }
            else if (evt.getSource() == cmbMoreLessValAdd) {
                ComponentSearchResultSCR.this.cmbMoreLessValAddActionPerformed(evt);
            }
        }

        public void focusGained(java.awt.event.FocusEvent evt) {
        }

        public void focusLost(java.awt.event.FocusEvent evt) {
            if (evt.getSource() == txtFilterStr) {
                ComponentSearchResultSCR.this.txtFilterStrFocusLost(evt);
            }
        }
    }// </editor-fold>//GEN-END:initComponents

    private void cmbFltrFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbFltrFieldActionPerformed
        if (doneInit) {
            fltrField = cmbFltrField.getSelectedIndex();
            fltrStirng = txtFilterStr.getText();
            if (fltrStirng == null) fltrStirng = "";
            applyFilter();
        }
    }//GEN-LAST:event_cmbFltrFieldActionPerformed

    private void txtFilterStrFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtFilterStrFocusLost
        if (doneInit) {
            fltrStirng = txtFilterStr.getText();
            if (fltrStirng == null) fltrStirng = "";
            applyFilter();
        }
    }//GEN-LAST:event_txtFilterStrFocusLost

    private void txtFilterStrActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtFilterStrActionPerformed
        if (doneInit) {
            fltrStirng = txtFilterStr.getText();
            if (fltrStirng == null) fltrStirng = "";
            applyFilter();
        }
    }//GEN-LAST:event_txtFilterStrActionPerformed

    private void chbEnabledOnlyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chbEnabledOnlyActionPerformed
        if (doneInit) {
            fltrEnabled = chbEnabledOnly.isSelected();
            applyFilter();
        }
    }//GEN-LAST:event_chbEnabledOnlyActionPerformed

    private void cmbMoreLessActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbMoreLessActionPerformed
        int selected = cmbMoreLess.getSelectedIndex();
        if (selected == -1) return;
        if (selected == 0) spnPrice.setEnabled(false);
        else spnPrice.setEnabled(true);
    }//GEN-LAST:event_cmbMoreLessActionPerformed

    private void cmbMoreLessValAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbMoreLessValAddActionPerformed
        int selected = cmbMoreLessValAdd.getSelectedIndex();
        if (selected == -1) return;
        if (selected == 0) spnValAd.setEnabled(false);
        else spnValAd.setEnabled(true);
    }//GEN-LAST:event_cmbMoreLessValAddActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox chbEnabledOnly;
    private javax.swing.JComboBox cmbFltrField;
    private javax.swing.JComboBox cmbMoreLess;
    private javax.swing.JComboBox cmbMoreLessValAdd;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblFilterStr;
    private javax.swing.JLabel lblImportanceFilter;
    private javax.swing.JLabel lblImportanceFilter1;
    private javax.swing.JLabel lblResultFilterBy;
    private javax.swing.JLabel lblResultsTitle;
    private javax.swing.JSpinner spnPrice;
    private javax.swing.JSpinner spnValAd;
    private javax.swing.JTable tblSearchResault;
    private javax.swing.JTextField txtFilterStr;
    // End of variables declaration//GEN-END:variables
}
