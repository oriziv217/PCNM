package PCNMClient.PCNMClientView;

import PCNMClient.PCNMClientController.PCSpecCTRL;
import PCNMClient.PCNMClientStart;
import static PCNMClient.PCNMClientView.WindowMustHave.showDialog;
import java.awt.Font;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import javax.swing.JLabel;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author ori ziv
 */
public class PCSPecSCR extends javax.swing.JPanel {
    private boolean doneInit;
    private int fltrField;
    private String fltrStirng;
    private int fltrWarrantyMode;
    private int fltrWarranty;
    private int fltrPriceMode;
    private float fltrPrice;
    private int fltrScoreMode;
    private int fltrScore;
    private boolean fltrEnabled;
    private ArrayList<String[]> allSpecs;
    private int allSpecsRowCounter;
    private boolean[] rowsToShow;
    private boolean isUpdate;
    private int onScreenID;
    private FormFrame frmSpecProp;
    private int selected;

    /**
     * Creates new form PCSPecSCR
     */
    public PCSPecSCR() {
        doneInit = false;
        initComponents();
        doneInit = true;
    }

    public PCSPecSCR(ArrayList<String[]> allSpecs) {
        this();
        doneInit = false;
        this.allSpecs = allSpecs;
        allSpecsRowCounter = allSpecs.size();
        rowsToShow = new boolean[allSpecsRowCounter];
        applyFilter();
        doneInit = true;
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pnlPCSpecProperties = new javax.swing.JPanel();
        lblPropertiesTitle = new javax.swing.JLabel();
        lblPropertiesName = new javax.swing.JLabel();
        lblPropertiesDescription = new javax.swing.JLabel();
        lblPropertiesPrice = new javax.swing.JLabel();
        lblPropertiesWarranty = new javax.swing.JLabel();
        lblPrpoertiesScore = new javax.swing.JLabel();
        lblPropertiesStatus = new javax.swing.JLabel();
        txtPropertiesDescription = new javax.swing.JTextField();
        txtPropertiesName = new javax.swing.JTextField();
        spnPropertiesWarranty = new javax.swing.JSpinner();
        spnPropertiesScore = new javax.swing.JSpinner();
        spnPropertiesPrice = new javax.swing.JSpinner();
        cmbPropertiesStatus = new javax.swing.JComboBox();
        btnPropertiesOK = new javax.swing.JButton();
        btnPropertiesCancel = new javax.swing.JButton();
        lblScreenTitle = new javax.swing.JLabel();
        lblFilterBy = new javax.swing.JLabel();
        cmbFilterBy = new javax.swing.JComboBox();
        lblFilterStr = new javax.swing.JLabel();
        txtFilterStr = new javax.swing.JTextField();
        lblFilterWarranty = new javax.swing.JLabel();
        cmbFilterWarranty = new javax.swing.JComboBox();
        spnFilterWarranty = new javax.swing.JSpinner();
        lblPriceFilter = new javax.swing.JLabel();
        cmbPriceFilter = new javax.swing.JComboBox();
        spnPriceFilter = new javax.swing.JSpinner();
        lblScoreFilter = new javax.swing.JLabel();
        cmbScoreFilter = new javax.swing.JComboBox();
        spnScoreFilter = new javax.swing.JSpinner();
        chbEnabledOnly = new javax.swing.JCheckBox();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblSearchResault = new javax.swing.JTable();
        btnClose = new javax.swing.JButton();
        btnNewPCSpec = new javax.swing.JButton();
        btnUpdate = new javax.swing.JButton();
        btnQuit = new javax.swing.JButton();

        pnlPCSpecProperties.setBackground(java.awt.Color.white);
        pnlPCSpecProperties.setMinimumSize(new java.awt.Dimension(570, 320));

        lblPropertiesTitle.setFont(new java.awt.Font("Times New Roman", 1, 24)); // NOI18N
        lblPropertiesTitle.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblPropertiesTitle.setText("Add New PC Specification");
        lblPropertiesTitle.setName("lblPropertiesTitle"); // NOI18N

        lblPropertiesName.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        lblPropertiesName.setText("Name:");

        lblPropertiesDescription.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        lblPropertiesDescription.setText("Description:");

        lblPropertiesPrice.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        lblPropertiesPrice.setText("Price:");

        lblPropertiesWarranty.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        lblPropertiesWarranty.setText("Warranty:");

        lblPrpoertiesScore.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        lblPrpoertiesScore.setText("Score:");

        lblPropertiesStatus.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        lblPropertiesStatus.setText("Status:");

        txtPropertiesDescription.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        txtPropertiesDescription.setToolTipText("");

        txtPropertiesName.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        txtPropertiesName.setToolTipText("");

        spnPropertiesWarranty.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        spnPropertiesWarranty.setModel(new javax.swing.SpinnerNumberModel(Integer.valueOf(0), Integer.valueOf(0), null, Integer.valueOf(1)));

        spnPropertiesScore.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        spnPropertiesScore.setModel(new javax.swing.SpinnerNumberModel(Integer.valueOf(0), Integer.valueOf(0), null, Integer.valueOf(1)));

        spnPropertiesPrice.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        spnPropertiesPrice.setModel(new javax.swing.SpinnerNumberModel(Float.valueOf(0.0f), Float.valueOf(0.0f), null, Float.valueOf(1.0f)));

        cmbPropertiesStatus.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        cmbPropertiesStatus.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Enabled", "Disabled", "Suspended" }));

        btnPropertiesOK.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        btnPropertiesOK.setText("OK");
        btnPropertiesOK.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        btnPropertiesOK.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPropertiesOKActionPerformed(evt);
            }
        });

        btnPropertiesCancel.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        btnPropertiesCancel.setText("Cancel");
        btnPropertiesCancel.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        btnPropertiesCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPropertiesCancelActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnlPCSpecPropertiesLayout = new javax.swing.GroupLayout(pnlPCSpecProperties);
        pnlPCSpecProperties.setLayout(pnlPCSpecPropertiesLayout);
        pnlPCSpecPropertiesLayout.setHorizontalGroup(
            pnlPCSpecPropertiesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(lblPropertiesTitle, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(pnlPCSpecPropertiesLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlPCSpecPropertiesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlPCSpecPropertiesLayout.createSequentialGroup()
                        .addComponent(lblPrpoertiesScore)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(pnlPCSpecPropertiesLayout.createSequentialGroup()
                        .addGroup(pnlPCSpecPropertiesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(pnlPCSpecPropertiesLayout.createSequentialGroup()
                                .addComponent(btnPropertiesOK, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(btnPropertiesCancel, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(pnlPCSpecPropertiesLayout.createSequentialGroup()
                                .addGroup(pnlPCSpecPropertiesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlPCSpecPropertiesLayout.createSequentialGroup()
                                        .addGroup(pnlPCSpecPropertiesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(lblPropertiesDescription)
                                            .addComponent(lblPropertiesName))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED))
                                    .addGroup(pnlPCSpecPropertiesLayout.createSequentialGroup()
                                        .addComponent(lblPropertiesPrice)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                                .addGroup(pnlPCSpecPropertiesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(txtPropertiesDescription, javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, pnlPCSpecPropertiesLayout.createSequentialGroup()
                                        .addGroup(pnlPCSpecPropertiesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(pnlPCSpecPropertiesLayout.createSequentialGroup()
                                                .addComponent(spnPropertiesPrice, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(18, 18, 18)
                                                .addComponent(lblPropertiesWarranty))
                                            .addGroup(pnlPCSpecPropertiesLayout.createSequentialGroup()
                                                .addComponent(spnPropertiesScore, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(18, 18, 18)
                                                .addComponent(lblPropertiesStatus)))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addGroup(pnlPCSpecPropertiesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(spnPropertiesWarranty, javax.swing.GroupLayout.DEFAULT_SIZE, 135, Short.MAX_VALUE)
                                            .addComponent(cmbPropertiesStatus, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                                    .addComponent(txtPropertiesName))))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );
        pnlPCSpecPropertiesLayout.setVerticalGroup(
            pnlPCSpecPropertiesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlPCSpecPropertiesLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblPropertiesTitle)
                .addGap(18, 18, 18)
                .addGroup(pnlPCSpecPropertiesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblPropertiesName)
                    .addComponent(txtPropertiesName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(pnlPCSpecPropertiesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblPropertiesDescription)
                    .addComponent(txtPropertiesDescription, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(pnlPCSpecPropertiesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(spnPropertiesWarranty, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblPropertiesPrice)
                    .addComponent(spnPropertiesPrice, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblPropertiesWarranty))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(pnlPCSpecPropertiesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblPrpoertiesScore)
                    .addComponent(spnPropertiesScore, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblPropertiesStatus)
                    .addComponent(cmbPropertiesStatus, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(pnlPCSpecPropertiesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnPropertiesOK)
                    .addComponent(btnPropertiesCancel))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        setBackground(java.awt.Color.white);
        setMinimumSize(new java.awt.Dimension(1185, 715));

        lblScreenTitle.setFont(new java.awt.Font("Times New Roman", 1, 48)); // NOI18N
        lblScreenTitle.setForeground(java.awt.Color.red);
        lblScreenTitle.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblScreenTitle.setText("PC Specification Management");
        lblScreenTitle.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        lblScreenTitle.setName("lblScreenTitle"); // NOI18N

        lblFilterBy.setFont(new java.awt.Font("Times New Roman", 0, 24)); // NOI18N
        lblFilterBy.setText("Filter By:");

        cmbFilterBy.setFont(new java.awt.Font("Times New Roman", 0, 24)); // NOI18N
        cmbFilterBy.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Show All", "Name", "Description" }));
        cmbFilterBy.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbFilterByActionPerformed(evt);
            }
        });

        lblFilterStr.setFont(new java.awt.Font("Times New Roman", 0, 24)); // NOI18N
        lblFilterStr.setText("Filter String:");

        txtFilterStr.setFont(new java.awt.Font("Times New Roman", 0, 24)); // NOI18N
        txtFilterStr.setEnabled(false);
        txtFilterStr.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtFilterStrFocusLost(evt);
            }
        });
        txtFilterStr.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtFilterStrActionPerformed(evt);
            }
        });

        lblFilterWarranty.setFont(new java.awt.Font("Times New Roman", 0, 24)); // NOI18N
        lblFilterWarranty.setText("Warranty Filter:");

        cmbFilterWarranty.setFont(new java.awt.Font("Times New Roman", 0, 24)); // NOI18N
        cmbFilterWarranty.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Show All", "Longer Then", "Shorter Then" }));
        cmbFilterWarranty.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbFilterWarrantyActionPerformed(evt);
            }
        });

        spnFilterWarranty.setFont(new java.awt.Font("Times New Roman", 0, 24)); // NOI18N
        spnFilterWarranty.setModel(new javax.swing.SpinnerNumberModel(Integer.valueOf(1), Integer.valueOf(1), null, Integer.valueOf(1)));
        spnFilterWarranty.setEnabled(false);
        spnFilterWarranty.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                spnFilterWarrantyStateChanged(evt);
            }
        });

        lblPriceFilter.setFont(new java.awt.Font("Times New Roman", 0, 24)); // NOI18N
        lblPriceFilter.setText("Price Filter:");

        cmbPriceFilter.setFont(new java.awt.Font("Times New Roman", 0, 24)); // NOI18N
        cmbPriceFilter.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "All", "More Then", "Less Then" }));
        cmbPriceFilter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbPriceFilterActionPerformed(evt);
            }
        });

        spnPriceFilter.setFont(new java.awt.Font("Times New Roman", 0, 24)); // NOI18N
        spnPriceFilter.setModel(new javax.swing.SpinnerNumberModel(Float.valueOf(0.0f), Float.valueOf(0.0f), null, Float.valueOf(1.0f)));
        spnPriceFilter.setEnabled(false);
        spnPriceFilter.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                spnPriceFilterStateChanged(evt);
            }
        });

        lblScoreFilter.setFont(new java.awt.Font("Times New Roman", 0, 24)); // NOI18N
        lblScoreFilter.setText("Score Filter:");

        cmbScoreFilter.setFont(new java.awt.Font("Times New Roman", 0, 24)); // NOI18N
        cmbScoreFilter.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "All", "More Then", "Less Then" }));
        cmbScoreFilter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbScoreFilterActionPerformed(evt);
            }
        });

        spnScoreFilter.setFont(new java.awt.Font("Times New Roman", 0, 24)); // NOI18N
        spnScoreFilter.setModel(new javax.swing.SpinnerNumberModel(Integer.valueOf(0), Integer.valueOf(0), null, Integer.valueOf(1)));
        spnScoreFilter.setEnabled(false);
        spnScoreFilter.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                spnScoreFilterStateChanged(evt);
            }
        });

        chbEnabledOnly.setFont(new java.awt.Font("Times New Roman", 0, 24)); // NOI18N
        chbEnabledOnly.setText("Show Enabled Only");
        chbEnabledOnly.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chbEnabledOnlyActionPerformed(evt);
            }
        });

        tblSearchResault.setAutoCreateRowSorter(true);
        tblSearchResault.setFont(new java.awt.Font("Times New Roman", 0, 24)); // NOI18N
        tblSearchResault.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "Name", "Description", "Price", "Warranty", "Score", "Status"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.Float.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblSearchResault.setRowHeight(32);
        jScrollPane1.setViewportView(tblSearchResault);
        if (tblSearchResault.getColumnModel().getColumnCount() > 0) {
            tblSearchResault.getColumnModel().getColumn(0).setMinWidth(200);
            tblSearchResault.getColumnModel().getColumn(0).setPreferredWidth(200);
            tblSearchResault.getColumnModel().getColumn(1).setMinWidth(315);
            tblSearchResault.getColumnModel().getColumn(1).setPreferredWidth(315);
            tblSearchResault.getColumnModel().getColumn(2).setMinWidth(150);
            tblSearchResault.getColumnModel().getColumn(2).setPreferredWidth(150);
            tblSearchResault.getColumnModel().getColumn(3).setMinWidth(150);
            tblSearchResault.getColumnModel().getColumn(3).setPreferredWidth(150);
            tblSearchResault.getColumnModel().getColumn(4).setMinWidth(150);
            tblSearchResault.getColumnModel().getColumn(4).setPreferredWidth(150);
            tblSearchResault.getColumnModel().getColumn(5).setMinWidth(200);
            tblSearchResault.getColumnModel().getColumn(5).setPreferredWidth(200);
        }
        tblSearchResault.getTableHeader().setFont(new Font("Times New Roman", Font.BOLD, 24));

        btnClose.setFont(new java.awt.Font("Times New Roman", 1, 24)); // NOI18N
        btnClose.setForeground(java.awt.Color.red);
        btnClose.setToolTipText("Close screen and return to log-in screen");
        btnClose.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        btnClose.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        btnClose.setInheritsPopupMenu(true);
        btnClose.setLabel("Close");
        btnClose.setName("btnClose"); // NOI18N
        btnClose.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCloseActionPerformed(evt);
            }
        });

        btnNewPCSpec.setFont(new java.awt.Font("Times New Roman", 1, 24)); // NOI18N
        btnNewPCSpec.setText("New PC Specification");
        btnNewPCSpec.setToolTipText("Add new system user");
        btnNewPCSpec.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        btnNewPCSpec.setMaximumSize(new java.awt.Dimension(99, 33));
        btnNewPCSpec.setMinimumSize(new java.awt.Dimension(99, 33));
        btnNewPCSpec.setPreferredSize(new java.awt.Dimension(99, 33));
        btnNewPCSpec.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNewPCSpecActionPerformed(evt);
            }
        });

        btnUpdate.setFont(new java.awt.Font("Times New Roman", 1, 24)); // NOI18N
        btnUpdate.setText("Update Selected");
        btnUpdate.setToolTipText("Update Selected");
        btnUpdate.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        btnUpdate.setMaximumSize(new java.awt.Dimension(99, 33));
        btnUpdate.setMinimumSize(new java.awt.Dimension(99, 33));
        btnUpdate.setPreferredSize(new java.awt.Dimension(99, 33));
        btnUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateActionPerformed(evt);
            }
        });

        btnQuit.setFont(new java.awt.Font("Times New Roman", 1, 24)); // NOI18N
        btnQuit.setForeground(java.awt.Color.red);
        btnQuit.setText("Quit");
        btnQuit.setToolTipText("Quit PCNM");
        btnQuit.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        btnQuit.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        btnQuit.setInheritsPopupMenu(true);
        btnQuit.setName("btnQuit"); // NOI18N
        btnQuit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnQuitActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(lblScreenTitle, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(lblFilterBy)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cmbFilterBy, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(lblFilterStr)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtFilterStr))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(lblFilterWarranty)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(cmbFilterWarranty, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(spnFilterWarranty, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(lblScoreFilter)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(cmbScoreFilter, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(spnScoreFilter, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(2, 2, 2)
                                .addComponent(lblPriceFilter)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(cmbPriceFilter, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(spnPriceFilter, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(chbEnabledOnly)))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnClose, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(125, 125, 125)
                        .addComponent(btnNewPCSpec, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 175, Short.MAX_VALUE)
                        .addComponent(btnUpdate, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(125, 125, 125)
                        .addComponent(btnQuit, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(lblScreenTitle)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblFilterBy)
                    .addComponent(cmbFilterBy, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblFilterStr)
                    .addComponent(txtFilterStr, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblFilterWarranty)
                    .addComponent(cmbFilterWarranty, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(spnFilterWarranty, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblPriceFilter)
                    .addComponent(cmbPriceFilter, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(spnPriceFilter, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblScoreFilter)
                    .addComponent(cmbScoreFilter, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(spnScoreFilter, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(chbEnabledOnly))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 420, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnClose, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnQuit, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnUpdate, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnNewPCSpec, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void cmbFilterByActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbFilterByActionPerformed
        if (doneInit) {
            fltrField = cmbFilterBy.getSelectedIndex();
            if (fltrField == -1) return;
            if (fltrField == 0)
                txtFilterStr.setEnabled(false);
            else {
                txtFilterStr.setEnabled(true);
                fltrStirng = txtFilterStr.getText();
                if (fltrStirng == null) fltrStirng = "";
            }
            applyFilter();
        }
    }//GEN-LAST:event_cmbFilterByActionPerformed

    private void txtFilterStrFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtFilterStrFocusLost
        if (doneInit) {
            fltrStirng = txtFilterStr.getText();
            if (fltrStirng == null) fltrStirng = "";
            applyFilter();
        }
    }//GEN-LAST:event_txtFilterStrFocusLost

    private void txtFilterStrActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtFilterStrActionPerformed
        if (doneInit) {
            fltrStirng = txtFilterStr.getText();
            if (fltrStirng == null) fltrStirng = "";
            applyFilter();
        }
    }//GEN-LAST:event_txtFilterStrActionPerformed

    private void cmbFilterWarrantyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbFilterWarrantyActionPerformed
        if (doneInit) {
            fltrWarrantyMode = cmbFilterWarranty.getSelectedIndex();
            if (fltrWarrantyMode == -1) return;
            if (fltrWarrantyMode == 0)
                spnFilterWarranty.setEnabled(false);
            else {
                spnFilterWarranty.setEnabled(true);
                fltrWarranty = (Integer)spnFilterWarranty.getValue();
            }
            applyFilter();
        }
    }//GEN-LAST:event_cmbFilterWarrantyActionPerformed

    private void spnFilterWarrantyStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_spnFilterWarrantyStateChanged
        if (doneInit) {
            fltrWarrantyMode = cmbFilterWarranty.getSelectedIndex();
            if (fltrWarrantyMode < 1) return;
            fltrWarranty = (Integer)spnFilterWarranty.getValue();
            applyFilter();
        }
    }//GEN-LAST:event_spnFilterWarrantyStateChanged

    private void cmbPriceFilterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbPriceFilterActionPerformed
        if (doneInit) {
            fltrPriceMode = cmbPriceFilter.getSelectedIndex();
            if (fltrPriceMode == -1) return;
            if (fltrPriceMode == 0)
                spnPriceFilter.setEnabled(false);
            else {
                spnPriceFilter.setEnabled(true);
                fltrPrice = (Float)spnPriceFilter.getValue();
            }
            applyFilter();
        }
    }//GEN-LAST:event_cmbPriceFilterActionPerformed

    private void spnPriceFilterStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_spnPriceFilterStateChanged
        if (doneInit) {
            fltrPriceMode = cmbPriceFilter.getSelectedIndex();
            if (fltrPriceMode < 1) return;
            fltrPrice = (Float)spnPriceFilter.getValue();
            applyFilter();
        }
    }//GEN-LAST:event_spnPriceFilterStateChanged

    private void cmbScoreFilterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbScoreFilterActionPerformed
        if (doneInit) {
            fltrScoreMode = cmbScoreFilter.getSelectedIndex();
            if (fltrScoreMode == -1) return;
            if (fltrScoreMode == 0)
                spnScoreFilter.setEnabled(false);
            else {
                spnScoreFilter.setEnabled(true);
                fltrScore = (Integer)spnScoreFilter.getValue();
            }
            applyFilter();
        }
    }//GEN-LAST:event_cmbScoreFilterActionPerformed

    private void spnScoreFilterStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_spnScoreFilterStateChanged
        if (doneInit) {
            fltrScoreMode = cmbScoreFilter.getSelectedIndex();
            if (fltrScoreMode < 1) return;
            fltrScore = (Integer)spnScoreFilter.getValue();
            applyFilter();
        }
    }//GEN-LAST:event_spnScoreFilterStateChanged

    private void chbEnabledOnlyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chbEnabledOnlyActionPerformed
        if (doneInit) {
            fltrEnabled = chbEnabledOnly.isSelected();
            applyFilter();
        }
    }//GEN-LAST:event_chbEnabledOnlyActionPerformed

    private void btnCloseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCloseActionPerformed
        PCSpecCTRL.closeBtnPressed();
    }//GEN-LAST:event_btnCloseActionPerformed

    private void btnNewPCSpecActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNewPCSpecActionPerformed
        isUpdate = false;
        clearFields();
        onScreenID = 0;
        frmSpecProp = new FormFrame();
        frmSpecProp.setSize(pnlPCSpecProperties.getMinimumSize());
        frmSpecProp.setLocationRelativeTo(null);
        lblPropertiesTitle.setText("Add New PC Specification");
        frmSpecProp.getContentPane().add(pnlPCSpecProperties);
        frmSpecProp.addWindowListener(exitListener);
        frmSpecProp.getContentPane().setVisible(true);
        PCNMClientStart.appWindow.setEnabled(false);
        frmSpecProp.setVisible(true);
    }//GEN-LAST:event_btnNewPCSpecActionPerformed

    private void btnUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateActionPerformed
        selected = tblSearchResault.getSelectedRow();
        if (selected == -1) {
            showDialog(this, "Please select PC Specification", DialogType.INFO);
            return;
        }
        isUpdate = true;
        int index = tblSearchResault.convertRowIndexToModel(selected);
        DefaultTableModel dtm = (DefaultTableModel)tblSearchResault.getModel();
        String[] comp = getSelectedRow((String)dtm.getValueAt(index, 0));
        if (comp == null) return;
        onScreenID = Integer.parseInt(comp[0]);
        txtPropertiesName.setText(comp[1]);
        txtPropertiesDescription.setText(comp[2]);
        spnPropertiesPrice.setValue(new Float(Float.parseFloat(comp[4])));
        spnPropertiesWarranty.setValue(new Integer(Integer.parseInt(comp[3])));
        spnPropertiesScore.setValue(new Integer(Integer.parseInt(comp[5])));
        if (comp[6].equals("Enabled")) cmbPropertiesStatus.setSelectedIndex(0);
        if (comp[6].equals("Disabled")) cmbPropertiesStatus.setSelectedIndex(1);
        if (comp[6].equals("Suspended")) cmbPropertiesStatus.setSelectedIndex(2);
        
        frmSpecProp = new FormFrame();
        lblPropertiesTitle.setText("Update PC Specification");
        frmSpecProp.setSize(pnlPCSpecProperties.getMinimumSize());
        frmSpecProp.setLocationRelativeTo(null);
        frmSpecProp.getContentPane().add(pnlPCSpecProperties);
        frmSpecProp.addWindowListener(exitListener);
        frmSpecProp.getContentPane().setVisible(true);
        PCNMClientStart.appWindow.setEnabled(false);
        frmSpecProp.setVisible(true);
    }//GEN-LAST:event_btnUpdateActionPerformed

    private void btnQuitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnQuitActionPerformed
        PCSpecCTRL.QuitBtnPressed();
    }//GEN-LAST:event_btnQuitActionPerformed

    private void btnPropertiesOKActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPropertiesOKActionPerformed
        String name = txtPropertiesName.getText();
        String description = txtPropertiesDescription.getText();
        float price = (Float)spnPropertiesPrice.getValue();
        int warranty = (Integer)spnPropertiesWarranty.getValue();
        int score = (Integer)spnPropertiesScore.getValue();
        String status = (String)cmbPropertiesStatus.getSelectedItem();
        if (name.isEmpty() || description.isEmpty() || status.isEmpty() || price <= 0 || warranty <= 0 || score <= 0) {
            showDialog(pnlPCSpecProperties, "All fields are mandatory.", DialogType.INFO);
            return;
        }

        for (String[] spec : allSpecs) {
            if (onScreenID != Integer.parseInt(spec[0]) && spec[1].equalsIgnoreCase(name)) {
                showDialog(pnlPCSpecProperties, "PC Specification name must be unique.", DialogType.INFO);
                return;
            }
        }

        try {
            if (!isUpdate) {
                PCSpecCTRL.AddPCSpecOKBtnPressed(name, description, price, warranty, score, status);
            } else {
                PCSpecCTRL.UpdatePCSpecOKBtnPressed(onScreenID, name, description, price, warranty, score, status);
            }
        } catch (IOException ex) {
            showDialog(pnlPCSpecProperties, "Lost Connection with the server", DialogType.ERROR);
            System.exit(0);
        }
        clearFields();
        frmSpecProp.dispose();
        PCNMClientStart.appWindow.setEnabled(true);
        PCNMClientStart.appWindow.requestFocus();
    }//GEN-LAST:event_btnPropertiesOKActionPerformed

    private void btnPropertiesCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPropertiesCancelActionPerformed
        clearFields();
        frmSpecProp.dispose();
        PCNMClientStart.appWindow.setEnabled(true);
        PCNMClientStart.appWindow.requestFocus();
    }//GEN-LAST:event_btnPropertiesCancelActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnClose;
    private javax.swing.JButton btnNewPCSpec;
    private javax.swing.JButton btnPropertiesCancel;
    private javax.swing.JButton btnPropertiesOK;
    private javax.swing.JButton btnQuit;
    private javax.swing.JButton btnUpdate;
    private javax.swing.JCheckBox chbEnabledOnly;
    private javax.swing.JComboBox cmbFilterBy;
    private javax.swing.JComboBox cmbFilterWarranty;
    private javax.swing.JComboBox cmbPriceFilter;
    private javax.swing.JComboBox cmbPropertiesStatus;
    private javax.swing.JComboBox cmbScoreFilter;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblFilterBy;
    private javax.swing.JLabel lblFilterStr;
    private javax.swing.JLabel lblFilterWarranty;
    private javax.swing.JLabel lblPriceFilter;
    private javax.swing.JLabel lblPropertiesDescription;
    private javax.swing.JLabel lblPropertiesName;
    private javax.swing.JLabel lblPropertiesPrice;
    private javax.swing.JLabel lblPropertiesStatus;
    private javax.swing.JLabel lblPropertiesTitle;
    private javax.swing.JLabel lblPropertiesWarranty;
    private javax.swing.JLabel lblPrpoertiesScore;
    private javax.swing.JLabel lblScoreFilter;
    private javax.swing.JLabel lblScreenTitle;
    private javax.swing.JPanel pnlPCSpecProperties;
    private javax.swing.JSpinner spnFilterWarranty;
    private javax.swing.JSpinner spnPriceFilter;
    private javax.swing.JSpinner spnPropertiesPrice;
    private javax.swing.JSpinner spnPropertiesScore;
    private javax.swing.JSpinner spnPropertiesWarranty;
    private javax.swing.JSpinner spnScoreFilter;
    private javax.swing.JTable tblSearchResault;
    private javax.swing.JTextField txtFilterStr;
    private javax.swing.JTextField txtPropertiesDescription;
    private javax.swing.JTextField txtPropertiesName;
    // End of variables declaration//GEN-END:variables

    private void applyFilter() {
        Arrays.fill(rowsToShow, true);
        allSpecsRowCounter = allSpecs.size();
        
        for (int i = 0 ; i < allSpecs.size() ; i ++) {
            String[] row = allSpecs.get(i);
            
            if (rowsToShow[i] && fltrField == 1 && !fltrStirng.isEmpty() && row[1].toLowerCase().indexOf(fltrStirng.toLowerCase()) == -1) rowsToShow[i] = false;
            if (rowsToShow[i] && fltrField == 2 && !fltrStirng.isEmpty() && row[2].toLowerCase().indexOf(fltrStirng.toLowerCase()) == -1) rowsToShow[i] = false;
            if (rowsToShow[i] && fltrWarrantyMode == 1 && fltrWarranty > Integer.parseInt(row[3])) rowsToShow[i] = false;
            if (rowsToShow[i] && fltrWarrantyMode == 2 && fltrWarranty < Integer.parseInt(row[3])) rowsToShow[i] = false;
            if (rowsToShow[i] && fltrPriceMode == 1 && fltrPrice > Float.parseFloat(row[4])) rowsToShow[i] = false;
            if (rowsToShow[i] && fltrPriceMode == 2 && fltrPrice < Integer.parseInt(row[4])) rowsToShow[i] = false;
            if (rowsToShow[i] && fltrScoreMode == 1 && fltrScore > Integer.parseInt(row[5])) rowsToShow[i] = false;
            if (rowsToShow[i] && fltrScoreMode == 2 && fltrScore < Integer.parseInt(row[5])) rowsToShow[i] = false;
            if (rowsToShow[i] && fltrEnabled && !row[6].equals("Enabled")) rowsToShow[i] = false;
            if (!rowsToShow[i]) allSpecsRowCounter --;
        }
        loadSearchResults();
    }

    private void loadSearchResults() {
        DefaultTableModel dtm = (DefaultTableModel)tblSearchResault.getModel();
        dtm.setRowCount(allSpecsRowCounter);
        int current_row = 0;
        for (int i = 0 ; i < allSpecs.size() ; i ++) {
            if (rowsToShow[i]) {
                String[] row = allSpecs.get(i);
                dtm.setValueAt(row[1], current_row, 0);
                dtm.setValueAt(row[2], current_row, 1);
                dtm.setValueAt(Float.parseFloat(row[4]), current_row, 2);
                dtm.setValueAt(Integer.parseInt(row[3]), current_row, 3);
                dtm.setValueAt(Integer.parseInt(row[5]), current_row, 4);
                dtm.setValueAt(row[6], current_row, 5);
                current_row ++;
                if (current_row > allSpecsRowCounter) i = allSpecs.size();
            }
        }
        DefaultTableCellRenderer leftRenderer = new DefaultTableCellRenderer();
        leftRenderer.setHorizontalAlignment(JLabel.LEFT);
        tblSearchResault.getColumnModel().getColumn(2).setCellRenderer(leftRenderer);
        tblSearchResault.getColumnModel().getColumn(3).setCellRenderer(leftRenderer);
        tblSearchResault.getColumnModel().getColumn(4).setCellRenderer(leftRenderer);
    }

    private void clearFields() {
        txtPropertiesName.setText("");
        txtPropertiesDescription.setText("");
        spnPropertiesPrice.setValue(new Float(0));
        spnPropertiesWarranty.setValue(new Integer(0));
        spnPropertiesScore.setValue(new Integer(0));
        cmbPropertiesStatus.setSelectedIndex(0);
    }
    
    private WindowListener exitListener = new WindowAdapter() {
            @Override
            public void windowClosing(WindowEvent e) {
                clearFields();
                frmSpecProp.dispose();
                PCNMClientStart.appWindow.setEnabled(true);
                PCNMClientStart.appWindow.requestFocus();
            }
        };

    private String[] getSelectedRow(String name) {
        for (String[] row : allSpecs) {
            if (row[1].equals(name))
                return row;
        }
        return null;
    }
}
