package PCNMClient.PCNMClientView;

import PCNMClient.PCNMClientController.TrioCTRL;
import static PCNMClient.PCNMClientView.WindowMustHave.showDialog;
import java.awt.Font;
import java.io.IOException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Calendar;
import java.util.Date;
import javax.swing.JLabel;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author ori ziv
 */
public class TrioSCR extends javax.swing.JPanel {
    private ArrayList<String[]> trio_tbl;
    private boolean[] rowsToShow;
    private boolean doneInit;
    private int fltrField;
    private String fltrStirng;
    private int scoreFilterMode;
    private float scoreFilter;
    private int startDateFilterMode;
    private Date startDateFilter;
    private int formMode;
    private int onScreenTrioID;
    private int activeTriosRowCounter;
    private int selectedRow;
    private FormFrame tiroPropertiesForm;

    /**
     * Creates new form TrioSCR
     */
    public TrioSCR() {
        doneInit = false;
        fltrField = TrioCTRL.getFieldFilterMode();
        fltrStirng = TrioCTRL.getFieldFilterString();
        scoreFilterMode = TrioCTRL.getScoreFilterMode();
        scoreFilter = TrioCTRL.getScoreFilter();
        startDateFilterMode = TrioCTRL.getStartDateFilterMode();
        startDateFilter = TrioCTRL.getStartDateFilter();
        initComponents();
        doneInit = true;
    }

    public TrioSCR(ArrayList<String[]> trio_tbl) {
        this();
        doneInit = false;
        this.trio_tbl = trio_tbl;
        activeTriosRowCounter = trio_tbl.size();
        rowsToShow = new boolean[activeTriosRowCounter];
        applyFilter();
        doneInit = true;
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblActiveTitle = new javax.swing.JLabel();
        lblFilterBy = new javax.swing.JLabel();
        cmbFltrField = new javax.swing.JComboBox();
        lblFilterStr = new javax.swing.JLabel();
        txtFilterStr = new javax.swing.JTextField();
        lblScoreFilter = new javax.swing.JLabel();
        cmbScoreFilter = new javax.swing.JComboBox();
        spnScoreFilter = new javax.swing.JSpinner();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblActiveTrios = new javax.swing.JTable();
        lblStartDateFilter = new javax.swing.JLabel();
        cmbStartDateFilterMode = new javax.swing.JComboBox();
        dtpStartDateFilter = new org.jdesktop.swingx.JXDatePicker();
        btnClose = new javax.swing.JButton();
        btnNewTrio = new javax.swing.JButton();
        btnViewTrio = new javax.swing.JButton();
        btnEndTrio = new javax.swing.JButton();
        btnQuit = new javax.swing.JButton();

        setBackground(java.awt.Color.white);
        setMinimumSize(new java.awt.Dimension(1442, 818));

        lblActiveTitle.setBackground(java.awt.Color.white);
        lblActiveTitle.setFont(new java.awt.Font("Times New Roman", 1, 48)); // NOI18N
        lblActiveTitle.setForeground(java.awt.Color.red);
        lblActiveTitle.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblActiveTitle.setText("Active PC-Workstation-User Type Connections");

        lblFilterBy.setBackground(java.awt.Color.white);
        lblFilterBy.setFont(new java.awt.Font("Times New Roman", 0, 24)); // NOI18N
        lblFilterBy.setText("Filter By:");

        cmbFltrField.setFont(new java.awt.Font("Times New Roman", 0, 24)); // NOI18N
        cmbFltrField.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Show All", "PC Name", "PC Specification", "Workstation Name", "User Type" }));
        cmbFltrField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbFltrFieldActionPerformed(evt);
            }
        });

        lblFilterStr.setFont(new java.awt.Font("Times New Roman", 0, 24)); // NOI18N
        lblFilterStr.setText("Filter String:");

        txtFilterStr.setFont(new java.awt.Font("Times New Roman", 0, 24)); // NOI18N
        txtFilterStr.setEnabled(false);
        txtFilterStr.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtFilterStrFocusLost(evt);
            }
        });
        txtFilterStr.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtFilterStrActionPerformed(evt);
            }
        });

        lblScoreFilter.setBackground(java.awt.Color.white);
        lblScoreFilter.setFont(new java.awt.Font("Times New Roman", 0, 24)); // NOI18N
        lblScoreFilter.setText("Total Score:");

        cmbScoreFilter.setFont(new java.awt.Font("Times New Roman", 0, 24)); // NOI18N
        cmbScoreFilter.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "All", "More Then", "Less Then" }));
        cmbScoreFilter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbScoreFilterActionPerformed(evt);
            }
        });

        spnScoreFilter.setFont(new java.awt.Font("Times New Roman", 0, 24)); // NOI18N
        spnScoreFilter.setModel(new javax.swing.SpinnerNumberModel(Float.valueOf(0.0f), Float.valueOf(0.0f), null, Float.valueOf(0.1f)));
        spnScoreFilter.setEnabled(false);
        spnScoreFilter.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                spnScoreFilterStateChanged(evt);
            }
        });

        tblActiveTrios.setAutoCreateRowSorter(true);
        tblActiveTrios.setFont(new java.awt.Font("Times New Roman", 0, 24)); // NOI18N
        tblActiveTrios.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "Start Date", "PC Name", "PC Specification", "Workstation Name", "User Type", "Total Scroe"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Float.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblActiveTrios.setRowHeight(32);
        jScrollPane1.setViewportView(tblActiveTrios);
        tblActiveTrios.getTableHeader().setFont(new Font("Times New Roman", Font.BOLD, 24));

        lblStartDateFilter.setBackground(java.awt.Color.white);
        lblStartDateFilter.setFont(new java.awt.Font("Times New Roman", 0, 24)); // NOI18N
        lblStartDateFilter.setText("Start Date:");

        cmbStartDateFilterMode.setFont(new java.awt.Font("Times New Roman", 0, 24)); // NOI18N
        cmbStartDateFilterMode.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "All", "After", "Before" }));
        cmbStartDateFilterMode.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbStartDateFilterModeActionPerformed(evt);
            }
        });

        dtpStartDateFilter.setEnabled(false);
        dtpStartDateFilter.setFont(new java.awt.Font("Times New Roman", 0, 24)); // NOI18N
        dtpStartDateFilter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dtpStartDateFilterActionPerformed(evt);
            }
        });

        btnClose.setFont(new java.awt.Font("Times New Roman", 1, 24)); // NOI18N
        btnClose.setForeground(java.awt.Color.red);
        btnClose.setToolTipText("Close screen and return to Manage Workstations screen");
        btnClose.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        btnClose.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        btnClose.setInheritsPopupMenu(true);
        btnClose.setLabel("Close");
        btnClose.setName("btnClose"); // NOI18N
        btnClose.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCloseActionPerformed(evt);
            }
        });

        btnNewTrio.setFont(new java.awt.Font("Times New Roman", 1, 24)); // NOI18N
        btnNewTrio.setText("New Connection");
        btnNewTrio.setToolTipText("Add new workstation");
        btnNewTrio.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        btnNewTrio.setMaximumSize(new java.awt.Dimension(99, 33));
        btnNewTrio.setMinimumSize(new java.awt.Dimension(99, 33));
        btnNewTrio.setPreferredSize(new java.awt.Dimension(99, 33));
        btnNewTrio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNewTrioActionPerformed(evt);
            }
        });

        btnViewTrio.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        btnViewTrio.setText("View Selected Connection");
        btnViewTrio.setToolTipText("Add new workstation");
        btnViewTrio.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        btnViewTrio.setMaximumSize(new java.awt.Dimension(99, 33));
        btnViewTrio.setMinimumSize(new java.awt.Dimension(99, 33));
        btnViewTrio.setPreferredSize(new java.awt.Dimension(99, 33));
        btnViewTrio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnViewTrioActionPerformed(evt);
            }
        });

        btnEndTrio.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        btnEndTrio.setText("Disband Selected Connection");
        btnEndTrio.setToolTipText("Add new workstation");
        btnEndTrio.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        btnEndTrio.setMaximumSize(new java.awt.Dimension(99, 33));
        btnEndTrio.setMinimumSize(new java.awt.Dimension(99, 33));
        btnEndTrio.setPreferredSize(new java.awt.Dimension(99, 33));
        btnEndTrio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEndTrioActionPerformed(evt);
            }
        });

        btnQuit.setFont(new java.awt.Font("Times New Roman", 1, 24)); // NOI18N
        btnQuit.setForeground(java.awt.Color.red);
        btnQuit.setText("Quit");
        btnQuit.setToolTipText("Quit PCNM");
        btnQuit.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        btnQuit.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        btnQuit.setInheritsPopupMenu(true);
        btnQuit.setName("btnQuit"); // NOI18N
        btnQuit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnQuitActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblActiveTitle, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(lblFilterBy)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(cmbFltrField, 0, 343, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(lblStartDateFilter)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(cmbStartDateFilterMode, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(dtpStartDateFilter, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(lblScoreFilter)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(cmbScoreFilter, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(spnScoreFilter, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(lblFilterStr)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtFilterStr, javax.swing.GroupLayout.PREFERRED_SIZE, 843, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addComponent(jScrollPane1)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnClose, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnNewTrio, javax.swing.GroupLayout.PREFERRED_SIZE, 233, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(btnViewTrio, javax.swing.GroupLayout.PREFERRED_SIZE, 233, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(btnEndTrio, javax.swing.GroupLayout.PREFERRED_SIZE, 233, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(224, 224, 224)
                        .addComponent(btnQuit, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblActiveTitle)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblFilterBy)
                    .addComponent(cmbFltrField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblFilterStr)
                    .addComponent(txtFilterStr, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblScoreFilter)
                    .addComponent(cmbScoreFilter, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(spnScoreFilter, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblStartDateFilter)
                    .addComponent(cmbStartDateFilterMode, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(dtpStartDateFilter, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 586, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnClose, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnQuit, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnNewTrio, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnViewTrio, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnEndTrio, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        cmbFltrField.setSelectedIndex(fltrField);
        if (fltrField == 0) txtFilterStr.setEnabled(false);
        else txtFilterStr.setEnabled(true);
        if (fltrField == 0) txtFilterStr.setEnabled(false);
        else txtFilterStr.setEnabled(true);
        txtFilterStr.setText(fltrStirng);
        cmbScoreFilter.setSelectedIndex(scoreFilterMode);
        if (scoreFilterMode == 0) spnScoreFilter.setEnabled(false);
        else spnScoreFilter.setEnabled(true);
        spnScoreFilter.setValue(scoreFilter);
        cmbStartDateFilterMode.setSelectedIndex(startDateFilterMode);
        if (startDateFilterMode == 0) dtpStartDateFilter.setEnabled(false);
        else dtpStartDateFilter.setEnabled(true);
        dtpStartDateFilter.setFormats(new SimpleDateFormat( "dd/MM/yyyy" ));
        if (startDateFilter != null) dtpStartDateFilter.setDate(startDateFilter);
        else dtpStartDateFilter.setDate(new Date());
    }// </editor-fold>//GEN-END:initComponents

    private void cmbFltrFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbFltrFieldActionPerformed
        if (doneInit) {
            fltrField = cmbFltrField.getSelectedIndex();
            if (fltrField == 0)
            txtFilterStr.setEnabled(false);
            else {
                txtFilterStr.setEnabled(true);
                fltrStirng = txtFilterStr.getText();
                if (fltrStirng == null) fltrStirng = "";
            }
            applyFilter();
        }
    }//GEN-LAST:event_cmbFltrFieldActionPerformed

    private void txtFilterStrFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtFilterStrFocusLost
        if (doneInit) {
            fltrStirng = txtFilterStr.getText();
            if (fltrStirng == null) fltrStirng = "";
            applyFilter();
        }
    }//GEN-LAST:event_txtFilterStrFocusLost

    private void txtFilterStrActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtFilterStrActionPerformed
        if (doneInit) {
            fltrStirng = txtFilterStr.getText();
            if (fltrStirng == null) fltrStirng = "";
            applyFilter();
        }
    }//GEN-LAST:event_txtFilterStrActionPerformed

    private void cmbScoreFilterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbScoreFilterActionPerformed
        if (doneInit) {
            scoreFilterMode = cmbScoreFilter.getSelectedIndex();
            if (scoreFilterMode == -1) return;
            if (scoreFilterMode == 0) spnScoreFilter.setEnabled(false);
            else {
                spnScoreFilter.setEnabled(true);
                scoreFilter = (Float)spnScoreFilter.getValue();
            }
            applyFilter();
        }
    }//GEN-LAST:event_cmbScoreFilterActionPerformed

    private void spnScoreFilterStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_spnScoreFilterStateChanged
        if (doneInit) {
            scoreFilterMode = cmbScoreFilter.getSelectedIndex();
            if (scoreFilterMode < 1) return;
            scoreFilter = (Float)spnScoreFilter.getValue();
            applyFilter();
        }
    }//GEN-LAST:event_spnScoreFilterStateChanged

    private void cmbStartDateFilterModeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbStartDateFilterModeActionPerformed
        if (doneInit) {
            startDateFilterMode = cmbStartDateFilterMode.getSelectedIndex();
            if (startDateFilterMode == 0)
            dtpStartDateFilter.setEnabled(false);
            else {
                dtpStartDateFilter.setEnabled(true);
                startDateFilter = dtpStartDateFilter.getDate();
            }
            applyFilter();
        }
    }//GEN-LAST:event_cmbStartDateFilterModeActionPerformed

    private void dtpStartDateFilterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dtpStartDateFilterActionPerformed
        if (!doneInit) return;
        startDateFilter = dtpStartDateFilter.getDate();
        applyFilter();
    }//GEN-LAST:event_dtpStartDateFilterActionPerformed

    private void btnCloseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCloseActionPerformed
        doneInit = false;
        setAllFilters();
        TrioCTRL.closeBtnPressed();
    }//GEN-LAST:event_btnCloseActionPerformed

    private void btnNewTrioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNewTrioActionPerformed
        setAllFilters();
        try {
            TrioCTRL.addNewTrio();
        } catch (IOException e) {
            showDialog(this, "Lost Connection with the server", DialogType.ERROR);
            System.exit(0);
        }
    }//GEN-LAST:event_btnNewTrioActionPerformed

    private void btnViewTrioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnViewTrioActionPerformed
        selectedRow = tblActiveTrios.getSelectedRow();
        if (selectedRow == -1) {
            showDialog(this, "Please select a row", DialogType.INFO);
            return;
        }
        int index = tblActiveTrios.convertRowIndexToModel(selectedRow);
        DefaultTableModel dtm = (DefaultTableModel)tblActiveTrios.getModel();
        int trioIndex = getTrioIndex((String)dtm.getValueAt(index, 0),
                                    (String)dtm.getValueAt(index, 1),
                                    (String)dtm.getValueAt(index, 3),
                                    (String)dtm.getValueAt(index, 4));
        setAllFilters();
        Calendar cal = Calendar.getInstance();
        String[] trio = trio_tbl.get(trioIndex);
        String[] sDateStrings = trio[0].split("/");
        cal.set(Integer.parseInt(sDateStrings[2]), Integer.parseInt(sDateStrings[1]) - 1, Integer.parseInt(sDateStrings[0]));
        int pcID = Integer.parseInt(trio[1]);
        int wsID = Integer.parseInt(trio[6]);
        int pcutID = Integer.parseInt(trio[9]);
        try {
            TrioCTRL.viewTrioProperties(cal.getTime(), pcID, wsID, pcutID);
        } catch (IOException e) {
            showDialog(this, "Lost Connection with the server", DialogType.ERROR);
            System.exit(0);
        }
    }//GEN-LAST:event_btnViewTrioActionPerformed

    private void btnEndTrioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEndTrioActionPerformed
        selectedRow = tblActiveTrios.getSelectedRow();
        if (selectedRow == -1) {
            showDialog(this, "Please select a row", DialogType.INFO);
            return;
        }
        int index = tblActiveTrios.convertRowIndexToModel(selectedRow);
        DefaultTableModel dtm = (DefaultTableModel)tblActiveTrios.getModel();
        int trioIndex = getTrioIndex((String)dtm.getValueAt(index, 0),
                                    (String)dtm.getValueAt(index, 1),
                                    (String)dtm.getValueAt(index, 3),
                                    (String)dtm.getValueAt(index, 4));
        setAllFilters();
        Calendar sDate = Calendar.getInstance();
        Calendar eDate = Calendar.getInstance();
        String[] trio = trio_tbl.get(trioIndex);
        String[] sDateStrings = trio[0].split("/");
        sDate.set(Integer.parseInt(sDateStrings[2]), Integer.parseInt(sDateStrings[1]) - 1, Integer.parseInt(sDateStrings[0]));
        int pcID = Integer.parseInt(trio[1]);
        int wsID = Integer.parseInt(trio[6]);
        int pcutID = Integer.parseInt(trio[9]);
        try {
            TrioCTRL.endTrio(sDate.getTime(), pcID, wsID, pcutID, eDate.getTime());
        } catch (IOException e) {
            showDialog(this, "Lost Connection with the server", DialogType.ERROR);
            System.exit(0);
        }
    }//GEN-LAST:event_btnEndTrioActionPerformed

    private void btnQuitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnQuitActionPerformed
        TrioCTRL.QuitBtnPressed();
    }//GEN-LAST:event_btnQuitActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnClose;
    private javax.swing.JButton btnEndTrio;
    private javax.swing.JButton btnNewTrio;
    private javax.swing.JButton btnQuit;
    private javax.swing.JButton btnViewTrio;
    private javax.swing.JComboBox cmbFltrField;
    private javax.swing.JComboBox cmbScoreFilter;
    private javax.swing.JComboBox cmbStartDateFilterMode;
    private org.jdesktop.swingx.JXDatePicker dtpStartDateFilter;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblActiveTitle;
    private javax.swing.JLabel lblFilterBy;
    private javax.swing.JLabel lblFilterStr;
    private javax.swing.JLabel lblScoreFilter;
    private javax.swing.JLabel lblStartDateFilter;
    private javax.swing.JSpinner spnScoreFilter;
    private javax.swing.JTable tblActiveTrios;
    private javax.swing.JTextField txtFilterStr;
    // End of variables declaration//GEN-END:variables

    private void applyFilter() {
        Arrays.fill(rowsToShow, true);
        activeTriosRowCounter = trio_tbl.size();
        Calendar cal = Calendar.getInstance();
        
        for (int i = 0 ; i < trio_tbl.size() ; i ++) {
            String[] row = trio_tbl.get(i);
            String[] startDateString = row[0].split("/");
            cal.set(Integer.parseInt(startDateString[2]), Integer.parseInt(startDateString[1]) - 1, Integer.parseInt(startDateString[0]));
            if (rowsToShow[i] && fltrField == 1 && !fltrStirng.isEmpty() && row[2].toLowerCase().indexOf(fltrStirng.toLowerCase()) == -1) rowsToShow[i] = false;
            if (rowsToShow[i] && fltrField == 2 && !fltrStirng.isEmpty() && row[4].toLowerCase().indexOf(fltrStirng.toLowerCase()) == -1) rowsToShow[i] = false;
            if (rowsToShow[i] && fltrField == 3 && !fltrStirng.isEmpty() && row[7].toLowerCase().indexOf(fltrStirng.toLowerCase()) == -1) rowsToShow[i] = false;
            if (rowsToShow[i] && fltrField == 4 && !fltrStirng.isEmpty() && row[10].toLowerCase().indexOf(fltrStirng.toLowerCase()) == -1) rowsToShow[i] = false;
            if (rowsToShow[i] && startDateFilterMode == 1 && startDateFilter.after(cal.getTime())) rowsToShow[i] = false;
            if (rowsToShow[i] && startDateFilterMode == 2 && startDateFilter.before(cal.getTime())) rowsToShow[i] = false;
            if (rowsToShow[i] && scoreFilterMode == 1 && scoreFilter > Float.parseFloat(row[12])) rowsToShow[i] = false;
            if (rowsToShow[i] && scoreFilterMode == 2 && scoreFilter < Float.parseFloat(row[12])) rowsToShow[i] = false;
            if (!rowsToShow[i]) activeTriosRowCounter --;
        }
        loadSearchResults();
    }

    private void loadSearchResults() {
        DefaultTableModel dtm = (DefaultTableModel)tblActiveTrios.getModel();
        dtm.setRowCount(activeTriosRowCounter);
        int current_row = 0;
        for (int i = 0 ; i < trio_tbl.size() ; i ++) {
            if (rowsToShow[i]) {
                String[] row = trio_tbl.get(i);
                dtm.setValueAt(row[0], current_row, 0);
                dtm.setValueAt(row[2], current_row, 1);
                dtm.setValueAt(row[4], current_row, 2);
                dtm.setValueAt(row[7], current_row, 3);
                dtm.setValueAt(row[10], current_row, 4);
                dtm.setValueAt(row[12], current_row, 5);
                current_row ++;
                if (current_row > activeTriosRowCounter) i = trio_tbl.size();
            }
        }
        DefaultTableCellRenderer leftRenderer = new DefaultTableCellRenderer();
        leftRenderer.setHorizontalAlignment(JLabel.LEFT);
        tblActiveTrios.getColumnModel().getColumn(5).setCellRenderer(leftRenderer);
    }

    private int getTrioIndex(String sDate, String pcName, String wsName, String pcutName) {
        for (int i = 0 ; i < trio_tbl.size() ; i ++) {
            String[] trio = trio_tbl.get(i);
            if (sDate.equals(trio[0]))
                if (pcName.equals(trio[2]))
                    if (wsName.equals(trio[7]))
                        if (pcutName.equals(trio[10]))
                            return i;
        }
        return -1;
    }

    private void setAllFilters() {
        TrioCTRL.setFieldFilterMode(cmbFltrField.getSelectedIndex());
        TrioCTRL.setFieldFilterString(txtFilterStr.getText());
        TrioCTRL.setStartDateFilterMode(cmbStartDateFilterMode.getSelectedIndex());
        TrioCTRL.setStartDateFilter(dtpStartDateFilter.getDate());
        TrioCTRL.setScoreFilterMode(cmbScoreFilter.getSelectedIndex());
        TrioCTRL.setScoreFilter((Float)spnScoreFilter.getValue());
    }
}
