package PCNMClient.PCNMClientView;

import Entities.EmpType;
import PCNMClient.PCNMClientController.WorkstationCTRL;
import PCNMClient.PCNMClientStart;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.util.Arrays;
import javax.swing.JLabel;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import static PCNMClient.PCNMClientView.WindowMustHave.showDialog;
import java.awt.Font;
import java.io.IOException;
import java.util.ArrayList;

/**
 * This class implements Workstation search-results screen
 * @author Ori Ziv
 */
public class WorkStationSearchResaults extends javax.swing.JPanel {

    private boolean doneInit;
    private int fltrMinScore;
    private int fltrField;
    private String fltrStirng;
    private boolean fltrEnabled;
    private int fltrImp;
    private String fltrType;
    private boolean isUpdate;
    private FormFrame addWorkstationForm;
    private int rowCounter;
    private boolean[] rowsToShow;
    private ArrayList<String[]> types;
    private ArrayList<String> ws_tbl;
    private String[][] tableContent;
    private int selected;
    private int onScreenWSID;

    /**
     * Creates new form WorkStationSearchResaults
     */
    public WorkStationSearchResaults() {
        doneInit = false;
        fltrField = 0;
        fltrStirng = "";
        fltrEnabled = false;
        fltrImp = 0;
        fltrType = "Show All";
        ArrayList<String> wstypes = new ArrayList<String>(PCNMClientStart.cur_ent.wstypesToString());
        String[] row;
        types = new ArrayList<String[]>();
        for (String typ : wstypes) {
            row = typ.split(",");
            types.add(row);
        }
        initComponents();
        doneInit = true;
    }

    /**
     * Creates new form WorkStationSearchResaults with content
     * @param ws_tbl
     */
    public WorkStationSearchResaults(ArrayList<String> ws_tbl) {
        this();
        doneInit = false;
        this.ws_tbl = ws_tbl;
        rowCounter = ws_tbl.size();
        rowsToShow = new boolean[rowCounter];
        Arrays.fill(rowsToShow, true);
        tableContent = new String[rowCounter][5];
        loadSearchResults();
        doneInit = true;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pnlAddWorkStationForm = new javax.swing.JPanel();
        lblAddWorkstationTitle = new javax.swing.JLabel();
        lblAddWorkstationName = new javax.swing.JLabel();
        lblAddWorkstationDescription = new javax.swing.JLabel();
        lblAddWorkstationImportance = new javax.swing.JLabel();
        lblAddWorkstationType = new javax.swing.JLabel();
        lblAddWorkstationMinRate = new javax.swing.JLabel();
        lblAddWorkstationStatus = new javax.swing.JLabel();
        txtAddWorkstationMinRate = new javax.swing.JTextField();
        txtAddWorkstationDescription = new javax.swing.JTextField();
        txtAddWorkstationName = new javax.swing.JTextField();
        spnAddWorkstationImportance = new javax.swing.JSpinner();
        cmbAddWorkstationStatus = new javax.swing.JComboBox();
        cmbAddWorkstationType = new javax.swing.JComboBox();
        btnAddWorkstationOK = new javax.swing.JButton();
        btnAddWorkstationCancel = new javax.swing.JButton();
        lblResultsTitle = new javax.swing.JLabel();
        lblResultFilterBy = new javax.swing.JLabel();
        cmbFltrMinScore = new javax.swing.JComboBox();
        cmbFltrField = new javax.swing.JComboBox();
        lblFilterStr = new javax.swing.JLabel();
        txtFilterStr = new javax.swing.JTextField();
        lblImportanceFilter = new javax.swing.JLabel();
        lblMinScoreFilter = new javax.swing.JLabel();
        chbEnabledOnly = new javax.swing.JCheckBox();
        lblMinScoreFilter1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblSearchResault = new javax.swing.JTable();
        cmbFltrImp = new javax.swing.JComboBox();
        cmbFltrType = new javax.swing.JComboBox();
        btnClose = new javax.swing.JButton();
        btnNewWorkstation = new javax.swing.JButton();
        btnUpdateWorkstation = new javax.swing.JButton();

        FormListener formListener = new FormListener();

        pnlAddWorkStationForm.setBackground(java.awt.Color.white);
        pnlAddWorkStationForm.setMinimumSize(new java.awt.Dimension(310, 420));

        lblAddWorkstationTitle.setFont(new java.awt.Font("Times New Roman", 1, 24)); // NOI18N
        lblAddWorkstationTitle.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblAddWorkstationTitle.setText("Add New Workstation");
        lblAddWorkstationTitle.setName("lblAddWorkstationTitle"); // NOI18N

        lblAddWorkstationName.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        lblAddWorkstationName.setText("Name:");

        lblAddWorkstationDescription.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        lblAddWorkstationDescription.setText("Description:");

        lblAddWorkstationImportance.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        lblAddWorkstationImportance.setText("Importance:");

        lblAddWorkstationType.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        lblAddWorkstationType.setText("Type:");

        lblAddWorkstationMinRate.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        lblAddWorkstationMinRate.setText("Minimal Rate:");

        lblAddWorkstationStatus.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        lblAddWorkstationStatus.setText("Status:");

        txtAddWorkstationMinRate.setEditable(false);
        txtAddWorkstationMinRate.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        txtAddWorkstationMinRate.setToolTipText("");

        txtAddWorkstationDescription.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        txtAddWorkstationDescription.setToolTipText("");

        txtAddWorkstationName.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        txtAddWorkstationName.setToolTipText("");

        spnAddWorkstationImportance.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        spnAddWorkstationImportance.setModel(new javax.swing.SpinnerNumberModel(1.0d, 0.1d, 1.9d, 0.1d));

        cmbAddWorkstationStatus.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        cmbAddWorkstationStatus.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Enabled", "Disabled", "Suspended" }));

        cmbAddWorkstationType.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        cmbAddWorkstationType.addActionListener(formListener);

        btnAddWorkstationOK.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        btnAddWorkstationOK.setText("OK");
        btnAddWorkstationOK.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        btnAddWorkstationOK.addActionListener(formListener);

        btnAddWorkstationCancel.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        btnAddWorkstationCancel.setText("Cancel");
        btnAddWorkstationCancel.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        btnAddWorkstationCancel.addActionListener(formListener);

        javax.swing.GroupLayout pnlAddWorkStationFormLayout = new javax.swing.GroupLayout(pnlAddWorkStationForm);
        pnlAddWorkStationForm.setLayout(pnlAddWorkStationFormLayout);
        pnlAddWorkStationFormLayout.setHorizontalGroup(
            pnlAddWorkStationFormLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlAddWorkStationFormLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlAddWorkStationFormLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(pnlAddWorkStationFormLayout.createSequentialGroup()
                        .addGroup(pnlAddWorkStationFormLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblAddWorkstationMinRate)
                            .addComponent(lblAddWorkstationDescription)
                            .addComponent(lblAddWorkstationName)
                            .addComponent(lblAddWorkstationImportance)
                            .addComponent(lblAddWorkstationStatus)
                            .addComponent(lblAddWorkstationType))
                        .addGap(18, 18, 18)
                        .addGroup(pnlAddWorkStationFormLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(cmbAddWorkstationType, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(cmbAddWorkstationStatus, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(spnAddWorkstationImportance, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtAddWorkstationName, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtAddWorkstationDescription, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtAddWorkstationMinRate, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(pnlAddWorkStationFormLayout.createSequentialGroup()
                        .addComponent(btnAddWorkstationOK, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnAddWorkstationCancel, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addComponent(lblAddWorkstationTitle, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        pnlAddWorkStationFormLayout.setVerticalGroup(
            pnlAddWorkStationFormLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlAddWorkStationFormLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblAddWorkstationTitle)
                .addGap(18, 18, 18)
                .addGroup(pnlAddWorkStationFormLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblAddWorkstationName)
                    .addComponent(txtAddWorkstationName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(pnlAddWorkStationFormLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblAddWorkstationDescription)
                    .addComponent(txtAddWorkstationDescription, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(pnlAddWorkStationFormLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblAddWorkstationImportance)
                    .addComponent(spnAddWorkstationImportance, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(pnlAddWorkStationFormLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblAddWorkstationType)
                    .addComponent(cmbAddWorkstationType, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(pnlAddWorkStationFormLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblAddWorkstationMinRate)
                    .addComponent(txtAddWorkstationMinRate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(pnlAddWorkStationFormLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblAddWorkstationStatus)
                    .addComponent(cmbAddWorkstationStatus, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(pnlAddWorkStationFormLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnAddWorkstationOK)
                    .addComponent(btnAddWorkstationCancel))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        for (String[] typ : types) {
            if (typ[4].equals("Enabled")) cmbAddWorkstationType.addItem(typ[1]);
        }

        setBackground(java.awt.Color.white);
        setMinimumSize(new java.awt.Dimension(1442, 818));

        lblResultsTitle.setBackground(java.awt.Color.white);
        lblResultsTitle.setFont(new java.awt.Font("Times New Roman", 1, 48)); // NOI18N
        lblResultsTitle.setForeground(java.awt.Color.red);
        lblResultsTitle.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblResultsTitle.setText("Workstations Search Results");

        lblResultFilterBy.setBackground(java.awt.Color.white);
        lblResultFilterBy.setFont(new java.awt.Font("Times New Roman", 0, 24)); // NOI18N
        lblResultFilterBy.setText("Filter By:");

        cmbFltrMinScore.setFont(new java.awt.Font("Times New Roman", 0, 24)); // NOI18N
        cmbFltrMinScore.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Show All", "Greater Then 100", "Less Then 100" }));
        cmbFltrMinScore.addActionListener(formListener);

        cmbFltrField.setFont(new java.awt.Font("Times New Roman", 0, 24)); // NOI18N
        cmbFltrField.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Show All", "Workstation Name", "Workstation Description" }));
        cmbFltrField.addActionListener(formListener);

        lblFilterStr.setFont(new java.awt.Font("Times New Roman", 0, 24)); // NOI18N
        lblFilterStr.setText("Filter String:");

        txtFilterStr.setFont(new java.awt.Font("Times New Roman", 0, 24)); // NOI18N
        txtFilterStr.addFocusListener(formListener);
        txtFilterStr.addActionListener(formListener);

        lblImportanceFilter.setFont(new java.awt.Font("Times New Roman", 0, 24)); // NOI18N
        lblImportanceFilter.setText("Importance Filter:");

        lblMinScoreFilter.setFont(new java.awt.Font("Times New Roman", 0, 24)); // NOI18N
        lblMinScoreFilter.setText("Minimal Rate Filter:");

        chbEnabledOnly.setFont(new java.awt.Font("Times New Roman", 0, 24)); // NOI18N
        chbEnabledOnly.setText("Show Enabled Only");
        chbEnabledOnly.addActionListener(formListener);

        lblMinScoreFilter1.setFont(new java.awt.Font("Times New Roman", 0, 24)); // NOI18N
        lblMinScoreFilter1.setText("Workstation Type Filter:");

        tblSearchResault.setAutoCreateRowSorter(true);
        tblSearchResault.setFont(new java.awt.Font("Times New Roman", 0, 24)); // NOI18N
        tblSearchResault.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "Name", "Description", "Importance", "Status", "Type", "Minimal Rate"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.Double.class, java.lang.String.class, java.lang.String.class, java.lang.Integer.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblSearchResault.setRowHeight(32);
        tblSearchResault.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPane1.setViewportView(tblSearchResault);
        tblSearchResault.getTableHeader().setFont(new Font("Times New Roman", Font.BOLD, 24));

        cmbFltrImp.setFont(new java.awt.Font("Times New Roman", 0, 24)); // NOI18N
        cmbFltrImp.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Show All", "Greater Then 1", "Less Then 1" }));
        cmbFltrImp.addActionListener(formListener);

        cmbFltrType.setFont(new java.awt.Font("Times New Roman", 0, 24)); // NOI18N
        cmbFltrType.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Show All" }));
        cmbFltrType.addActionListener(formListener);

        btnClose.setFont(new java.awt.Font("Times New Roman", 1, 24)); // NOI18N
        btnClose.setForeground(java.awt.Color.red);
        btnClose.setToolTipText("Close screen and return to Manage Workstations screen");
        btnClose.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        btnClose.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        btnClose.setInheritsPopupMenu(true);
        btnClose.setLabel("Close");
        btnClose.setName("btnClose"); // NOI18N
        btnClose.addActionListener(formListener);

        btnNewWorkstation.setFont(new java.awt.Font("Times New Roman", 1, 24)); // NOI18N
        btnNewWorkstation.setText("New Workstation");
        btnNewWorkstation.setToolTipText("Add new workstation");
        btnNewWorkstation.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        btnNewWorkstation.setMaximumSize(new java.awt.Dimension(99, 33));
        btnNewWorkstation.setMinimumSize(new java.awt.Dimension(99, 33));
        btnNewWorkstation.setPreferredSize(new java.awt.Dimension(99, 33));
        btnNewWorkstation.addActionListener(formListener);

        btnUpdateWorkstation.setFont(new java.awt.Font("Times New Roman", 1, 24)); // NOI18N
        btnUpdateWorkstation.setText("Update Selected");
        btnUpdateWorkstation.setToolTipText("Update selected workstation");
        btnUpdateWorkstation.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        btnUpdateWorkstation.setMaximumSize(new java.awt.Dimension(99, 33));
        btnUpdateWorkstation.setMinimumSize(new java.awt.Dimension(99, 33));
        btnUpdateWorkstation.setPreferredSize(new java.awt.Dimension(99, 33));
        btnUpdateWorkstation.addActionListener(formListener);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(lblResultsTitle, javax.swing.GroupLayout.DEFAULT_SIZE, 1442, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnClose, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(btnNewWorkstation, javax.swing.GroupLayout.PREFERRED_SIZE, 191, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(btnUpdateWorkstation, javax.swing.GroupLayout.PREFERRED_SIZE, 191, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(lblResultFilterBy)
                        .addGap(5, 5, 5)
                        .addComponent(cmbFltrField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(chbEnabledOnly)
                        .addGap(88, 88, 88))))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addContainerGap()
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jScrollPane1)
                        .addGroup(layout.createSequentialGroup()
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(lblImportanceFilter)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(cmbFltrImp, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(17, 17, 17)
                                    .addComponent(lblMinScoreFilter1)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(cmbFltrType, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(182, 182, 182)
                                    .addComponent(lblMinScoreFilter)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(cmbFltrMinScore, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(layout.createSequentialGroup()
                                    .addGap(388, 388, 388)
                                    .addComponent(lblFilterStr)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(txtFilterStr, javax.swing.GroupLayout.PREFERRED_SIZE, 599, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGap(0, 86, Short.MAX_VALUE)))
                    .addContainerGap()))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(lblResultsTitle)
                .addGap(26, 26, 26)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cmbFltrField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblResultFilterBy)
                    .addComponent(chbEnabledOnly))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 628, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnClose, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnNewWorkstation, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnUpdateWorkstation, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(82, 82, 82)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(lblFilterStr)
                        .addComponent(txtFilterStr, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGap(18, 18, 18)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(lblImportanceFilter)
                        .addComponent(lblMinScoreFilter)
                        .addComponent(lblMinScoreFilter1)
                        .addComponent(cmbFltrImp, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(cmbFltrType, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(cmbFltrMinScore, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGap(18, 18, 18)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 550, Short.MAX_VALUE)
                    .addGap(82, 82, 82)))
        );

        for (String[] typ : types) {
            cmbFltrType.addItem(typ[1]);
        }
        if (PCNMClientStart.user.getType() == EmpType.TECHNICIAN)
        btnNewWorkstation.setEnabled(false);
    }

    // Code for dispatching events from components to event handlers.

    private class FormListener implements java.awt.event.ActionListener, java.awt.event.FocusListener {
        FormListener() {}
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            if (evt.getSource() == cmbFltrMinScore) {
                WorkStationSearchResaults.this.cmbFltrMinScoreActionPerformed(evt);
            }
            else if (evt.getSource() == cmbFltrField) {
                WorkStationSearchResaults.this.cmbFltrFieldActionPerformed(evt);
            }
            else if (evt.getSource() == txtFilterStr) {
                WorkStationSearchResaults.this.txtFilterStrActionPerformed(evt);
            }
            else if (evt.getSource() == chbEnabledOnly) {
                WorkStationSearchResaults.this.chbEnabledOnlyActionPerformed(evt);
            }
            else if (evt.getSource() == cmbFltrImp) {
                WorkStationSearchResaults.this.cmbFltrImpActionPerformed(evt);
            }
            else if (evt.getSource() == cmbFltrType) {
                WorkStationSearchResaults.this.cmbFltrTypeActionPerformed(evt);
            }
            else if (evt.getSource() == btnClose) {
                WorkStationSearchResaults.this.btnCloseActionPerformed(evt);
            }
            else if (evt.getSource() == btnNewWorkstation) {
                WorkStationSearchResaults.this.btnNewWorkstationActionPerformed(evt);
            }
            else if (evt.getSource() == btnUpdateWorkstation) {
                WorkStationSearchResaults.this.btnUpdateWorkstationActionPerformed(evt);
            }
            else if (evt.getSource() == cmbAddWorkstationType) {
                WorkStationSearchResaults.this.cmbAddWorkstationTypeActionPerformed(evt);
            }
            else if (evt.getSource() == btnAddWorkstationOK) {
                WorkStationSearchResaults.this.btnAddWorkstationOKActionPerformed(evt);
            }
            else if (evt.getSource() == btnAddWorkstationCancel) {
                WorkStationSearchResaults.this.btnAddWorkstationCancelActionPerformed(evt);
            }
        }

        public void focusGained(java.awt.event.FocusEvent evt) {
        }

        public void focusLost(java.awt.event.FocusEvent evt) {
            if (evt.getSource() == txtFilterStr) {
                WorkStationSearchResaults.this.txtFilterStrFocusLost(evt);
            }
        }
    }// </editor-fold>//GEN-END:initComponents

    private void cmbFltrMinScoreActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbFltrMinScoreActionPerformed
        if (doneInit) {
            fltrMinScore = cmbFltrMinScore.getSelectedIndex();
            applyFilter();
        }
    }//GEN-LAST:event_cmbFltrMinScoreActionPerformed

    private void cmbFltrFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbFltrFieldActionPerformed
        if (doneInit) {
            fltrField = cmbFltrField.getSelectedIndex();
            fltrStirng = txtFilterStr.getText();
            if (fltrStirng == null) fltrStirng = "";
            applyFilter();
        }
    }//GEN-LAST:event_cmbFltrFieldActionPerformed

    private void txtFilterStrFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtFilterStrFocusLost
        if (doneInit) {
            fltrStirng = txtFilterStr.getText();
            if (fltrStirng == null) fltrStirng = "";
            applyFilter();
        }
    }//GEN-LAST:event_txtFilterStrFocusLost

    private void txtFilterStrActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtFilterStrActionPerformed
        if (doneInit) {
            fltrStirng = txtFilterStr.getText();
            if (fltrStirng == null) fltrStirng = "";
            applyFilter();
        }
    }//GEN-LAST:event_txtFilterStrActionPerformed

    private void chbEnabledOnlyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chbEnabledOnlyActionPerformed
        if (doneInit) {
            fltrEnabled = chbEnabledOnly.isSelected();
            applyFilter();
        }
    }//GEN-LAST:event_chbEnabledOnlyActionPerformed

    private void cmbFltrImpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbFltrImpActionPerformed
        if (doneInit) {
            fltrImp = cmbFltrImp.getSelectedIndex();
            applyFilter();
        }
    }//GEN-LAST:event_cmbFltrImpActionPerformed

    private void cmbFltrTypeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbFltrTypeActionPerformed
        if (doneInit) {
            fltrType = String.valueOf(cmbFltrType.getSelectedItem());
            applyFilter();
        }
    }//GEN-LAST:event_cmbFltrTypeActionPerformed

    private void btnCloseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCloseActionPerformed
        doneInit = false;
        WorkstationCTRL.searchResaultCloseBtnPressed();
    }//GEN-LAST:event_btnCloseActionPerformed

    private void btnNewWorkstationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNewWorkstationActionPerformed
        isUpdate = false;
        onScreenWSID = 0;
        addWorkstationClearFields();
        addWorkstationForm = new FormFrame();
        addWorkstationForm.setSize(pnlAddWorkStationForm.getMinimumSize());
        addWorkstationForm.setLocationRelativeTo(null);
        lblAddWorkstationTitle.setText("Add New Workstation");
        addWorkstationForm.getContentPane().add(pnlAddWorkStationForm);
        addWorkstationForm.addWindowListener(exitListener);
        addWorkstationForm.getContentPane().setVisible(true);
        PCNMClientStart.appWindow.setEnabled(false);
        addWorkstationForm.setVisible(true);
    }//GEN-LAST:event_btnNewWorkstationActionPerformed

    private void cmbAddWorkstationTypeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbAddWorkstationTypeActionPerformed
        int selected = cmbAddWorkstationType.getSelectedIndex();
        if (selected == -1) {
            txtAddWorkstationMinRate.setText("");
            return;
        }
        String[] typ = types.get(getTypeIndex((String)cmbAddWorkstationType.getSelectedItem()));
        txtAddWorkstationMinRate.setText(typ[3]);
    }//GEN-LAST:event_cmbAddWorkstationTypeActionPerformed

    private void btnAddWorkstationOKActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddWorkstationOKActionPerformed
        String name = txtAddWorkstationName.getText();
        String description = txtAddWorkstationDescription.getText();
        double importance = (Double)spnAddWorkstationImportance.getValue();
        int type = cmbAddWorkstationType.getSelectedIndex();
        String status = (String)cmbAddWorkstationStatus.getSelectedItem();
        if (name.isEmpty() || description.isEmpty() || type == -1 || status.isEmpty()) {
            showDialog(pnlAddWorkStationForm, "All fields are mandatory.", DialogType.INFO);
            return;
        }
        String typ = (String)cmbAddWorkstationType.getSelectedItem();
        for (int i = 0 ; i < types.size() ; i ++) {
            if (types.get(i)[1].equals(typ)) {
                type = i;
                i = types.size();
            }
        }
        try {
            if (!WorkstationCTRL.isNameUnique(onScreenWSID, name)) {
                showDialog(pnlAddWorkStationForm, "Workstation Name must be unique.", DialogType.INFO);
                return;
            }
        } catch (IOException ex) {
            showDialog(pnlAddWorkStationForm, ex.getMessage(), DialogType.ERROR);
            System.exit(0);
        }
        try {
            if (!isUpdate) {
                WorkstationCTRL.AddWorkstationBtnPressed(name, description, importance, status,
                                    types.get(type)[0], types.get(type)[1], types.get(type)[2], types.get(type)[3], types.get(type)[4]);
            }
            else {
                WorkstationCTRL.UpdateWorkstationBtnPressed(onScreenWSID ,name, description, importance, status,
                                    types.get(type)[0], types.get(type)[1], types.get(type)[2], types.get(type)[3], types.get(type)[4]);
            }
        } catch (IOException ex) {
            showDialog(pnlAddWorkStationForm, "Lost Connection with the server", DialogType.ERROR);
            System.exit(0);
        }
        addWorkstationClearFields();
        addWorkstationForm.dispose();
        PCNMClientStart.appWindow.setEnabled(true);
        PCNMClientStart.appWindow.requestFocus();
    }//GEN-LAST:event_btnAddWorkstationOKActionPerformed

    private void btnAddWorkstationCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddWorkstationCancelActionPerformed
        addWorkstationClearFields();
        addWorkstationForm.dispose();
        PCNMClientStart.appWindow.setEnabled(true);
        PCNMClientStart.appWindow.requestFocus();
    }//GEN-LAST:event_btnAddWorkstationCancelActionPerformed

    private void btnUpdateWorkstationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateWorkstationActionPerformed
        selected = tblSearchResault.getSelectedRow();
        if (selected == -1) {
            showDialog(this, "Please select Workstation", DialogType.INFO);
            return;
        }
        isUpdate = true;
        int index = getIDByName(tblSearchResault.convertRowIndexToModel(selected));
        onScreenWSID = Integer.parseInt(tableContent[index][0]);
        txtAddWorkstationName.setText(tableContent[index][1]);
        txtAddWorkstationDescription.setText(tableContent[index][2]);
        spnAddWorkstationImportance.setValue(Double.parseDouble(tableContent[index][3]));
        cmbAddWorkstationType.setSelectedItem(tableContent[index][6]);
        txtAddWorkstationMinRate.setText(tableContent[index][8]);
        cmbAddWorkstationStatus.setSelectedIndex(getStatusIndex(tableContent[index][4]));
        addWorkstationForm = new FormFrame();
        lblAddWorkstationTitle.setText("Update Workstation");
        addWorkstationForm.setSize(pnlAddWorkStationForm.getMinimumSize());
        addWorkstationForm.setLocationRelativeTo(null);
        addWorkstationForm.getContentPane().add(pnlAddWorkStationForm);
        addWorkstationForm.addWindowListener(exitListener);
        addWorkstationForm.getContentPane().setVisible(true);
        PCNMClientStart.appWindow.setEnabled(false);
        addWorkstationForm.setVisible(true);
    }//GEN-LAST:event_btnUpdateWorkstationActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAddWorkstationCancel;
    private javax.swing.JButton btnAddWorkstationOK;
    private javax.swing.JButton btnClose;
    private javax.swing.JButton btnNewWorkstation;
    private javax.swing.JButton btnUpdateWorkstation;
    private javax.swing.JCheckBox chbEnabledOnly;
    private javax.swing.JComboBox cmbAddWorkstationStatus;
    private javax.swing.JComboBox cmbAddWorkstationType;
    private javax.swing.JComboBox cmbFltrField;
    private javax.swing.JComboBox cmbFltrImp;
    private javax.swing.JComboBox cmbFltrMinScore;
    private javax.swing.JComboBox cmbFltrType;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblAddWorkstationDescription;
    private javax.swing.JLabel lblAddWorkstationImportance;
    private javax.swing.JLabel lblAddWorkstationMinRate;
    private javax.swing.JLabel lblAddWorkstationName;
    private javax.swing.JLabel lblAddWorkstationStatus;
    private javax.swing.JLabel lblAddWorkstationTitle;
    private javax.swing.JLabel lblAddWorkstationType;
    private javax.swing.JLabel lblFilterStr;
    private javax.swing.JLabel lblImportanceFilter;
    private javax.swing.JLabel lblMinScoreFilter;
    private javax.swing.JLabel lblMinScoreFilter1;
    private javax.swing.JLabel lblResultFilterBy;
    private javax.swing.JLabel lblResultsTitle;
    private javax.swing.JPanel pnlAddWorkStationForm;
    private javax.swing.JSpinner spnAddWorkstationImportance;
    private javax.swing.JTable tblSearchResault;
    private javax.swing.JTextField txtAddWorkstationDescription;
    private javax.swing.JTextField txtAddWorkstationMinRate;
    private javax.swing.JTextField txtAddWorkstationName;
    private javax.swing.JTextField txtFilterStr;
    // End of variables declaration//GEN-END:variables
    
    private void loadSearchResults() {
        String row;
        DefaultTableModel dtm = (DefaultTableModel)tblSearchResault.getModel();
        dtm.setRowCount(rowCounter);
        int cur_row = 0;
        for (int i = 0 ; i < ws_tbl.size() ; i ++) {
            if (rowsToShow[i]) {
                row = ws_tbl.get(i);
                tableContent[i] = row.split(",");
                dtm.setValueAt(tableContent[i][1], cur_row, 0);
                dtm.setValueAt(tableContent[i][2], cur_row, 1);
                dtm.setValueAt(Double.parseDouble(tableContent[i][3]), cur_row, 2);
                dtm.setValueAt(tableContent[i][4], cur_row, 3);
                dtm.setValueAt(tableContent[i][6], cur_row, 4);
                dtm.setValueAt(Integer.parseInt(tableContent[i][8]), cur_row, 5);
                cur_row ++;
                if (cur_row > rowCounter)
                    i = ws_tbl.size();
            }
        }
        DefaultTableCellRenderer leftRenderer = new DefaultTableCellRenderer();
        leftRenderer.setHorizontalAlignment(JLabel.LEFT);
        tblSearchResault.getColumnModel().getColumn(2).setCellRenderer(leftRenderer);
        tblSearchResault.getColumnModel().getColumn(5).setCellRenderer(leftRenderer);
    }

        private void applyFilter() {
            Arrays.fill(rowsToShow, true);
            rowCounter = tableContent.length;
            for (int i = 0 ; i < tableContent.length ; i ++) {
                if (rowsToShow[i] && fltrField == 1 && !fltrStirng.isEmpty() && tableContent[i][1].toLowerCase().indexOf(fltrStirng) == -1) rowsToShow[i] = false;
                if (rowsToShow[i] && fltrField == 2 && !fltrStirng.isEmpty() && tableContent[i][2].toLowerCase().indexOf(fltrStirng) == -1) rowsToShow[i] = false;
                if (rowsToShow[i] && fltrImp == 1 && Double.parseDouble(tableContent[i][3]) < 1) rowsToShow[i] = false;
                if (rowsToShow[i] && fltrImp == 2 && Double.parseDouble(tableContent[i][3]) > 1) rowsToShow[i] = false;
                if (rowsToShow[i] && fltrEnabled && !tableContent[i][4].equals("Enabled")) rowsToShow[i] = false;
                if (rowsToShow[i] && !fltrType.equals("Show All") && !tableContent[i][6].equals(fltrType)) rowsToShow[i] = false;
                if (rowsToShow[i] && fltrMinScore == 1 && Integer.parseInt(tableContent[i][8]) < 100) rowsToShow[i] = false;
                if (rowsToShow[i] && fltrMinScore == 2 && Integer.parseInt(tableContent[i][8]) > 100) rowsToShow[i] = false;
                if (!rowsToShow[i]) rowCounter --;
            }
            loadSearchResults();
        }

        private void addWorkstationClearFields() {
            txtAddWorkstationName.setText("");
            txtAddWorkstationDescription.setText("");
            spnAddWorkstationImportance.setValue(new Double(1.0));
            cmbAddWorkstationType.setSelectedIndex(-1);
            cmbAddWorkstationStatus.setSelectedIndex(0);
        }

        private WindowListener exitListener = new WindowAdapter() {
            @Override
            public void windowClosing(WindowEvent e) {
                addWorkstationClearFields();
                addWorkstationForm.dispose();
                PCNMClientStart.appWindow.setEnabled(true);
                PCNMClientStart.appWindow.requestFocus();
            }
        };

    private int getTypeIndex(String typName) {
        for (int i = 0 ; i < types.size() ; i ++)
            if (typName.equals(types.get(i)[1]))
                return i;
        return -1;
    }

    private int getStatusIndex(String stsStr) {
        switch (stsStr) {
            case "Enabled":
                return 0;
            case "Disabled":
                return 1;
            case "Suspended":
                return 2;
        }
        return -1;
    }
    
    private int getIDByName(int row) {
        DefaultTableModel dtm = (DefaultTableModel)tblSearchResault.getModel();
        String name = (String)dtm.getValueAt(row, 0);
        for (int i = 0 ; i < tableContent.length ; i ++)
            if (name.equals(tableContent[i][1]))
                return i;
        return -1;
    }
}
