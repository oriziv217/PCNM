package PCNMClient.PCNMClientView;

import Entities.EmpType;
import PCNMClient.PCNMClientController.PCCTRL;
import PCNMClient.PCNMClientStart;
import static PCNMClient.PCNMClientView.WindowMustHave.showDialog;
import java.awt.Font;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.io.IOException;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Calendar;
import java.util.Date;
import javax.swing.JLabel;
import javax.swing.ListSelectionModel;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;

/**
 * This class implements the PC search results screen
 * @author ori ziv
 */
public class PCSearchResultSCR extends javax.swing.JPanel {
    private boolean doneInit;
    private int fltrField;
    private String fltrStirng;
    private int fltrInstDateMode;
    private Date fltrInstDate;
    private int fltrSpecIndex;
    private String fltrSpec;
    private boolean fltrExpired;
    private boolean fltrEnabled;
    private ArrayList<String> specTableNames;
    private ArrayList<String> pc_tbl;
    private int rowCounter;
    private boolean[] rowsToShow;
    private String[][] tableContent;
    private FormFrame pcPropertiesForm;
    private FormFrame pcCompForm;
    private int formMode;
    private int onScreenPCID;
    private ArrayList<String[]> enaSpec;
    private int selectedRow;
    private ArrayList<String> compEnaList;
    private ArrayList<String> compInstList;
    private int enaCompRowCounter;
    private int instCompRowCounter;
    private boolean[] selectedEnaComps;
    private boolean[] selectedInstComps;
    private String[][] enaCompTableContent;
    private String[][] instCompTableContent;

    /**
     * Creates new form PCSearchResultSCR
     */
    public PCSearchResultSCR() {
        doneInit = false;
        fltrField = 0;
        fltrStirng = "";
        fltrInstDateMode = 0;
        fltrInstDate = new Date();
        fltrSpecIndex = 0;
        fltrSpec = "";
        fltrExpired = false;
        fltrEnabled = false;
        specTableNames = new ArrayList<String>();
        enaSpec = new ArrayList<String[]>();
        compEnaList = PCCTRL.getEnaCompStringArr();
        compInstList = new ArrayList<String>();
        enaCompRowCounter = compEnaList.size();
        instCompRowCounter = 0;
        enaCompTableContent = new String[enaCompRowCounter][6];
        instCompTableContent = new String[1][9];
        selectedEnaComps = new boolean[enaCompRowCounter];
        selectedInstComps = new boolean[1];
        Arrays.fill(selectedInstComps, false);
        Arrays.fill(selectedInstComps, false);
        loadEnaSpec();
        loadEnaComp();
        initComponents();
        doneInit = true;
    }

    /**
     * This constructor utilize the default constructor and then loads content into the screen's forms
     * @param pc_tbl 
     */
    public PCSearchResultSCR(ArrayList<String> pc_tbl) {
        this();
        doneInit = false;
        this.pc_tbl = pc_tbl;
        rowCounter = pc_tbl.size();
        rowsToShow = new boolean[rowCounter];
        Arrays.fill(rowsToShow, true);
        tableContent = new String[rowCounter][12];
        loadSearchResults();
        loadCmbSpecificationNameFilter();
        cmbSpecificationNameFilter.setSelectedIndex(fltrSpecIndex);
        doneInit = true;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pnlPCProperties = new javax.swing.JPanel();
        lblPCPropertiesTitle = new javax.swing.JLabel();
        lblPCPropertiesName = new javax.swing.JLabel();
        lblPCPropertiesDescription = new javax.swing.JLabel();
        lblPCPropertiesInstDate = new javax.swing.JLabel();
        lblPCPropertiesSpec = new javax.swing.JLabel();
        lblPCPropertiesStatus = new javax.swing.JLabel();
        txtPCPropertiesName = new javax.swing.JTextField();
        txtPCPropertiesDescription = new javax.swing.JTextField();
        dtpPCPropertiesInstalDate = new org.jdesktop.swingx.JXDatePicker();
        cmbPCPropertiesSpec = new javax.swing.JComboBox();
        cmbPCPropertiesStatus = new javax.swing.JComboBox();
        txtPCPropertiesSpecScore = new javax.swing.JTextField();
        lblPCPropertiesSpecScore = new javax.swing.JLabel();
        lblPCPropertiesSpecPrice = new javax.swing.JLabel();
        txtPCPropertiesSpecPrtice = new javax.swing.JTextField();
        lblPCPropertiesSpecWarrenty = new javax.swing.JLabel();
        txtPCPropertiesSpecWarrenty = new javax.swing.JTextField();
        lblPCPropertiesStatusExplain = new javax.swing.JLabel();
        btnPCPropertiesOK = new javax.swing.JButton();
        btnPCPropertiesComponents = new javax.swing.JButton();
        btnPCPropertiesCancel = new javax.swing.JButton();
        pnlPCComp = new javax.swing.JPanel();
        lblPCCompTitle = new javax.swing.JLabel();
        lblPCCompEnaComp = new javax.swing.JLabel();
        txtPCCompName = new javax.swing.JTextField();
        lbPCCompDescription = new javax.swing.JLabel();
        txtPCCompDescription = new javax.swing.JTextField();
        lblPCPropertiesInstDate1 = new javax.swing.JLabel();
        txtPCPropertiesName3 = new javax.swing.JTextField();
        lblPCPropertiesSpec1 = new javax.swing.JLabel();
        lblPCCompSpecName = new javax.swing.JLabel();
        txtPCCompSpecName = new javax.swing.JTextField();
        txtPCPropertiesName4 = new javax.swing.JTextField();
        lblPCCompWarrenty = new javax.swing.JLabel();
        txtPCCompWarrenty = new javax.swing.JTextField();
        lblPCCompStatus = new javax.swing.JLabel();
        txtPCCompStatus = new javax.swing.JTextField();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblPCCompEnaComp = new javax.swing.JTable();
        lbPCCompName = new javax.swing.JLabel();
        lblPCCompInstComp = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        tblPCCompInstComp = new javax.swing.JTable();
        btnPCCompInstComp = new javax.swing.JButton();
        btnPCCompUninstComp = new javax.swing.JButton();
        btnPCCompCancel = new javax.swing.JButton();
        btnPCCompApply = new javax.swing.JButton();
        lblPCCompPCScore = new javax.swing.JLabel();
        lblPCCompScoreVal = new javax.swing.JLabel();
        lblResultsTitle = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblSearchResault = new javax.swing.JTable();
        lblResultFilterBy = new javax.swing.JLabel();
        cmbFltrField = new javax.swing.JComboBox();
        lblFilterStr = new javax.swing.JLabel();
        txtFilterStr = new javax.swing.JTextField();
        lblInstDateFilter = new javax.swing.JLabel();
        cmbInstDateFilterMode = new javax.swing.JComboBox();
        dtpInstalDateFilter = new org.jdesktop.swingx.JXDatePicker();
        lblSpecificationNameFilter = new javax.swing.JLabel();
        cmbSpecificationNameFilter = new javax.swing.JComboBox();
        chbExpiredOnly = new javax.swing.JCheckBox();
        chbEnabledOnly = new javax.swing.JCheckBox();
        btnClose = new javax.swing.JButton();
        btnQuit = new javax.swing.JButton();
        btnNewPC = new javax.swing.JButton();
        btnViewPC = new javax.swing.JButton();
        btnUpdatePC = new javax.swing.JButton();
        btnMapPC = new javax.swing.JButton();

        pnlPCProperties.setBackground(java.awt.Color.white);
        pnlPCProperties.setMinimumSize(new java.awt.Dimension(600, 400));
        pnlPCProperties.setPreferredSize(new java.awt.Dimension(600, 400));

        lblPCPropertiesTitle.setFont(new java.awt.Font("Times New Roman", 1, 24)); // NOI18N
        lblPCPropertiesTitle.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblPCPropertiesTitle.setText("Add New PC");
        lblPCPropertiesTitle.setName("lblPCPropertiesTitle"); // NOI18N

        lblPCPropertiesName.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        lblPCPropertiesName.setText("Name:");

        lblPCPropertiesDescription.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        lblPCPropertiesDescription.setText("Description:");

        lblPCPropertiesInstDate.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        lblPCPropertiesInstDate.setText("Instalation Date:");

        lblPCPropertiesSpec.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        lblPCPropertiesSpec.setText("Specification:");

        lblPCPropertiesStatus.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        lblPCPropertiesStatus.setText("Status:");

        txtPCPropertiesName.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        txtPCPropertiesName.setToolTipText("");

        txtPCPropertiesDescription.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        txtPCPropertiesDescription.setToolTipText("");

        dtpPCPropertiesInstalDate.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N

        cmbPCPropertiesSpec.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        cmbPCPropertiesSpec.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Select Specification" }));
        cmbPCPropertiesSpec.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbPCPropertiesSpecActionPerformed(evt);
            }
        });

        cmbPCPropertiesStatus.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        cmbPCPropertiesStatus.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Select Status", "Enabled", "Disabled", "Suspended" }));
        cmbPCPropertiesStatus.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbPCPropertiesStatusActionPerformed(evt);
            }
        });

        txtPCPropertiesSpecScore.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        txtPCPropertiesSpecScore.setToolTipText("");
        txtPCPropertiesSpecScore.setEnabled(false);

        lblPCPropertiesSpecScore.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        lblPCPropertiesSpecScore.setText("Score:");

        lblPCPropertiesSpecPrice.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        lblPCPropertiesSpecPrice.setText("Price:");

        txtPCPropertiesSpecPrtice.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        txtPCPropertiesSpecPrtice.setToolTipText("");
        txtPCPropertiesSpecPrtice.setEnabled(false);

        lblPCPropertiesSpecWarrenty.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        lblPCPropertiesSpecWarrenty.setText("Warrenty:");

        txtPCPropertiesSpecWarrenty.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        txtPCPropertiesSpecWarrenty.setToolTipText("");
        txtPCPropertiesSpecWarrenty.setEnabled(false);

        lblPCPropertiesStatusExplain.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        lblPCPropertiesStatusExplain.setText("Explanation...");

        btnPCPropertiesOK.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        btnPCPropertiesOK.setText("OK");
        btnPCPropertiesOK.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        btnPCPropertiesOK.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPCPropertiesOKActionPerformed(evt);
            }
        });

        btnPCPropertiesComponents.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        btnPCPropertiesComponents.setText("Add Components");
        btnPCPropertiesComponents.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        btnPCPropertiesComponents.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPCPropertiesComponentsActionPerformed(evt);
            }
        });

        btnPCPropertiesCancel.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        btnPCPropertiesCancel.setText("Cancel");
        btnPCPropertiesCancel.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        btnPCPropertiesCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPCPropertiesCancelActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnlPCPropertiesLayout = new javax.swing.GroupLayout(pnlPCProperties);
        pnlPCProperties.setLayout(pnlPCPropertiesLayout);
        pnlPCPropertiesLayout.setHorizontalGroup(
            pnlPCPropertiesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlPCPropertiesLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlPCPropertiesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblPCPropertiesTitle, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(pnlPCPropertiesLayout.createSequentialGroup()
                        .addGroup(pnlPCPropertiesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblPCPropertiesInstDate)
                            .addComponent(lblPCPropertiesName)
                            .addComponent(lblPCPropertiesDescription)
                            .addComponent(lblPCPropertiesSpec)
                            .addComponent(lblPCPropertiesStatus)
                            .addComponent(btnPCPropertiesOK, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(pnlPCPropertiesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtPCPropertiesName)
                            .addComponent(txtPCPropertiesDescription)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlPCPropertiesLayout.createSequentialGroup()
                                .addGroup(pnlPCPropertiesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(pnlPCPropertiesLayout.createSequentialGroup()
                                        .addComponent(lblPCPropertiesSpecPrice)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(txtPCPropertiesSpecPrtice, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 90, Short.MAX_VALUE)
                                        .addComponent(lblPCPropertiesSpecWarrenty)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(txtPCPropertiesSpecWarrenty, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, pnlPCPropertiesLayout.createSequentialGroup()
                                        .addComponent(dtpPCPropertiesInstalDate, javax.swing.GroupLayout.PREFERRED_SIZE, 195, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(0, 0, Short.MAX_VALUE))
                                    .addComponent(cmbPCPropertiesSpec, javax.swing.GroupLayout.Alignment.LEADING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(lblPCPropertiesSpecScore)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtPCPropertiesSpecScore, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(pnlPCPropertiesLayout.createSequentialGroup()
                                .addComponent(cmbPCPropertiesStatus, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(lblPCPropertiesStatusExplain, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(pnlPCPropertiesLayout.createSequentialGroup()
                                .addGap(62, 62, 62)
                                .addComponent(btnPCPropertiesComponents, javax.swing.GroupLayout.PREFERRED_SIZE, 151, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(btnPCPropertiesCancel, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap())
        );
        pnlPCPropertiesLayout.setVerticalGroup(
            pnlPCPropertiesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlPCPropertiesLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblPCPropertiesTitle)
                .addGap(18, 18, 18)
                .addGroup(pnlPCPropertiesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblPCPropertiesName)
                    .addComponent(txtPCPropertiesName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(pnlPCPropertiesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(lblPCPropertiesDescription)
                    .addComponent(txtPCPropertiesDescription, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(pnlPCPropertiesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblPCPropertiesInstDate)
                    .addComponent(dtpPCPropertiesInstalDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(pnlPCPropertiesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblPCPropertiesSpec)
                    .addComponent(cmbPCPropertiesSpec, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblPCPropertiesSpecScore)
                    .addComponent(txtPCPropertiesSpecScore, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlPCPropertiesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblPCPropertiesSpecPrice)
                    .addComponent(txtPCPropertiesSpecPrtice, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblPCPropertiesSpecWarrenty)
                    .addComponent(txtPCPropertiesSpecWarrenty, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(pnlPCPropertiesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cmbPCPropertiesStatus, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblPCPropertiesStatus)
                    .addComponent(lblPCPropertiesStatusExplain))
                .addGap(18, 18, 18)
                .addGroup(pnlPCPropertiesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnPCPropertiesOK)
                    .addComponent(btnPCPropertiesComponents)
                    .addComponent(btnPCPropertiesCancel))
                .addContainerGap(55, Short.MAX_VALUE))
        );

        if (formMode == 3) txtPCPropertiesName.setEnabled(false);
        else txtPCPropertiesName.setEnabled(true);
        if (formMode == 3) txtPCPropertiesDescription.setEnabled(false);
        else txtPCPropertiesDescription.setEnabled(true);
        dtpPCPropertiesInstalDate.setFormats(new SimpleDateFormat( "dd/MM/yyyy" ));
        dtpPCPropertiesInstalDate.getMonthView().setUpperBound(new Date());
        if (formMode == 1) dtpPCPropertiesInstalDate.setDate(new Date());
        if (formMode == 3) dtpPCPropertiesInstalDate.setEnabled(false);
        else dtpPCPropertiesInstalDate.setEnabled(true);
        for (String[]spec : enaSpec) cmbPCPropertiesSpec.addItem(spec[1]);
        if (formMode == 3) cmbPCPropertiesSpec.setEnabled(false);
        else cmbPCPropertiesSpec.setEnabled(true);
        setStatusExplanation(cmbPCPropertiesStatus.getSelectedIndex());
        if (formMode == 3) cmbPCPropertiesStatus.setEnabled(false);
        else cmbPCPropertiesStatus.setEnabled(true);

        pnlPCComp.setBackground(java.awt.Color.white);

        lblPCCompTitle.setFont(new java.awt.Font("Times New Roman", 1, 24)); // NOI18N
        lblPCCompTitle.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblPCCompTitle.setText("Install/Uninstall Components");
        lblPCCompTitle.setName("lblPCPropertiesTitle"); // NOI18N

        lblPCCompEnaComp.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        lblPCCompEnaComp.setText("Available Components:");

        txtPCCompName.setEditable(false);
        txtPCCompName.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        txtPCCompName.setToolTipText("");

        lbPCCompDescription.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        lbPCCompDescription.setText("Description:");

        txtPCCompDescription.setEditable(false);
        txtPCCompDescription.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        txtPCCompDescription.setToolTipText("");

        lblPCPropertiesInstDate1.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        lblPCPropertiesInstDate1.setText("Instalation Date:");

        txtPCPropertiesName3.setEditable(false);
        txtPCPropertiesName3.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        txtPCPropertiesName3.setToolTipText("");

        lblPCPropertiesSpec1.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        lblPCPropertiesSpec1.setText("Spec' Desc':");

        lblPCCompSpecName.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        lblPCCompSpecName.setText("Spec' Name:");

        txtPCCompSpecName.setEditable(false);
        txtPCCompSpecName.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        txtPCCompSpecName.setToolTipText("");

        txtPCPropertiesName4.setEditable(false);
        txtPCPropertiesName4.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        txtPCPropertiesName4.setToolTipText("");

        lblPCCompWarrenty.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        lblPCCompWarrenty.setText("Warrenty Expiration:");

        txtPCCompWarrenty.setEditable(false);
        txtPCCompWarrenty.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        txtPCCompWarrenty.setToolTipText("");

        lblPCCompStatus.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        lblPCCompStatus.setText("PC Status:");

        txtPCCompStatus.setEditable(false);
        txtPCCompStatus.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        txtPCCompStatus.setToolTipText("");

        tblPCCompEnaComp.setAutoCreateRowSorter(true);
        tblPCCompEnaComp.setFont(new java.awt.Font("Times New Roman", 0, 24)); // NOI18N
        tblPCCompEnaComp.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Name", "Description", "Price", "Value Add"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.Float.class, java.lang.Float.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, true, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblPCCompEnaComp.setRowHeight(32);
        jScrollPane2.setViewportView(tblPCCompEnaComp);
        tblPCCompEnaComp.getTableHeader().setFont(new Font("Times New Roman", Font.BOLD, 24));
        tblPCCompEnaComp.getSelectionModel().setSelectionMode(ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);
        tblPCCompEnaComp.getSelectionModel().addListSelectionListener(tblPCCompEnaCompListListener);

        lbPCCompName.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        lbPCCompName.setText("Name:");

        lblPCCompInstComp.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        lblPCCompInstComp.setText("Installed Components:");

        tblPCCompInstComp.setAutoCreateRowSorter(true);
        tblPCCompInstComp.setFont(new java.awt.Font("Times New Roman", 0, 24)); // NOI18N
        tblPCCompInstComp.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Name", "Description", "Price", "Value Add"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.Float.class, java.lang.Float.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, true, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblPCCompInstComp.setRowHeight(32);
        jScrollPane3.setViewportView(tblPCCompInstComp);
        tblPCCompInstComp.getTableHeader().setFont(new Font("Times New Roman", Font.BOLD, 24));
        tblPCCompInstComp.getSelectionModel().setSelectionMode(ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);
        tblPCCompInstComp.getSelectionModel().addListSelectionListener(tblPCCompInstCompListListener);

        btnPCCompInstComp.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        btnPCCompInstComp.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Resources/RightArrow.jpg"))); // NOI18N
        btnPCCompInstComp.setToolTipText("Install Available Components");
        btnPCCompInstComp.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        btnPCCompInstComp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPCCompInstCompActionPerformed(evt);
            }
        });

        btnPCCompUninstComp.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        btnPCCompUninstComp.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Resources/LeftArrow.jpg"))); // NOI18N
        btnPCCompUninstComp.setToolTipText("Uninstall Selecetd Components");
        btnPCCompUninstComp.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        btnPCCompUninstComp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPCCompUninstCompActionPerformed(evt);
            }
        });

        btnPCCompCancel.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        btnPCCompCancel.setText("Cancel");
        btnPCCompCancel.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        btnPCCompCancel.setMaximumSize(new java.awt.Dimension(130, 54));
        btnPCCompCancel.setMinimumSize(new java.awt.Dimension(130, 54));
        btnPCCompCancel.setPreferredSize(new java.awt.Dimension(130, 54));
        btnPCCompCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPCCompCancelActionPerformed(evt);
            }
        });

        btnPCCompApply.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        btnPCCompApply.setText("Apply Changes");
        btnPCCompApply.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        btnPCCompApply.setMaximumSize(new java.awt.Dimension(130, 54));
        btnPCCompApply.setMinimumSize(new java.awt.Dimension(130, 54));
        btnPCCompApply.setPreferredSize(new java.awt.Dimension(130, 54));
        btnPCCompApply.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPCCompApplyActionPerformed(evt);
            }
        });

        lblPCCompPCScore.setFont(new java.awt.Font("Times New Roman", 1, 24)); // NOI18N
        lblPCCompPCScore.setForeground(java.awt.Color.red);
        lblPCCompPCScore.setText("PC Score:");

        lblPCCompScoreVal.setFont(new java.awt.Font("Times New Roman", 1, 24)); // NOI18N
        lblPCCompScoreVal.setForeground(java.awt.Color.red);
        lblPCCompScoreVal.setText("100");

        javax.swing.GroupLayout pnlPCCompLayout = new javax.swing.GroupLayout(pnlPCComp);
        pnlPCComp.setLayout(pnlPCCompLayout);
        pnlPCCompLayout.setHorizontalGroup(
            pnlPCCompLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlPCCompLayout.createSequentialGroup()
                .addGap(67, 67, 67)
                .addComponent(lblPCCompTitle, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(75, 75, 75))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlPCCompLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lbPCCompName)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtPCCompName, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(lbPCCompDescription)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtPCCompDescription)
                .addContainerGap())
            .addGroup(pnlPCCompLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblPCCompSpecName)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtPCCompSpecName, javax.swing.GroupLayout.PREFERRED_SIZE, 154, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(lblPCPropertiesSpec1, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtPCPropertiesName4)
                .addContainerGap())
            .addGroup(pnlPCCompLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlPCCompLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlPCCompLayout.createSequentialGroup()
                        .addComponent(btnPCCompApply, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnPCCompCancel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(pnlPCCompLayout.createSequentialGroup()
                        .addGroup(pnlPCCompLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblPCCompEnaComp)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(pnlPCCompLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(btnPCCompInstComp, javax.swing.GroupLayout.DEFAULT_SIZE, 38, Short.MAX_VALUE)
                            .addComponent(btnPCCompUninstComp, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGroup(pnlPCCompLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(pnlPCCompLayout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 33, Short.MAX_VALUE)
                                .addComponent(lblPCCompInstComp)
                                .addGap(276, 276, 276))
                            .addGroup(pnlPCCompLayout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jScrollPane3)))))
                .addContainerGap())
            .addGroup(pnlPCCompLayout.createSequentialGroup()
                .addGroup(pnlPCCompLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlPCCompLayout.createSequentialGroup()
                        .addGap(56, 56, 56)
                        .addComponent(lblPCPropertiesInstDate1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtPCPropertiesName3, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(lblPCCompWarrenty)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtPCCompWarrenty, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(lblPCCompStatus)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtPCCompStatus, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(pnlPCCompLayout.createSequentialGroup()
                        .addGap(390, 390, 390)
                        .addComponent(lblPCCompPCScore)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lblPCCompScoreVal)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        pnlPCCompLayout.setVerticalGroup(
            pnlPCCompLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlPCCompLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblPCCompTitle)
                .addGap(18, 18, 18)
                .addGroup(pnlPCCompLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtPCCompName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lbPCCompDescription)
                    .addComponent(txtPCCompDescription, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lbPCCompName))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(pnlPCCompLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblPCCompSpecName)
                    .addComponent(txtPCCompSpecName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblPCPropertiesSpec1)
                    .addComponent(txtPCPropertiesName4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(pnlPCCompLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblPCPropertiesInstDate1)
                    .addComponent(txtPCPropertiesName3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblPCCompWarrenty)
                    .addComponent(txtPCCompWarrenty, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblPCCompStatus)
                    .addComponent(txtPCCompStatus, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(pnlPCCompLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblPCCompPCScore)
                    .addComponent(lblPCCompScoreVal))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlPCCompLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlPCCompLayout.createSequentialGroup()
                        .addComponent(lblPCCompEnaComp)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(pnlPCCompLayout.createSequentialGroup()
                        .addComponent(lblPCCompInstComp)
                        .addGroup(pnlPCCompLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(pnlPCCompLayout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(pnlPCCompLayout.createSequentialGroup()
                                .addGap(113, 113, 113)
                                .addComponent(btnPCCompInstComp)
                                .addGap(18, 18, 18)
                                .addComponent(btnPCCompUninstComp)))))
                .addGap(18, 18, 18)
                .addGroup(pnlPCCompLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(btnPCCompCancel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnPCCompApply, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(16, Short.MAX_VALUE))
        );

        if (formMode == 3) txtPCPropertiesName.setEnabled(false);
        else txtPCPropertiesName.setEnabled(true);
        if (formMode == 3) txtPCPropertiesName.setEnabled(false);
        else txtPCPropertiesName.setEnabled(true);
        if (formMode == 3) txtPCPropertiesName.setEnabled(false);
        else txtPCPropertiesName.setEnabled(true);
        if (formMode == 3) txtPCPropertiesName.setEnabled(false);
        else txtPCPropertiesName.setEnabled(true);
        if (formMode == 3) txtPCPropertiesName.setEnabled(false);
        else txtPCPropertiesName.setEnabled(true);
        if (formMode == 3) txtPCPropertiesName.setEnabled(false);
        else txtPCPropertiesName.setEnabled(true);
        if (formMode == 3) txtPCPropertiesName.setEnabled(false);
        else txtPCPropertiesName.setEnabled(true);

        setBackground(java.awt.Color.white);
        setMinimumSize(new java.awt.Dimension(1442, 818));

        lblResultsTitle.setBackground(java.awt.Color.white);
        lblResultsTitle.setFont(new java.awt.Font("Times New Roman", 1, 48)); // NOI18N
        lblResultsTitle.setForeground(java.awt.Color.red);
        lblResultsTitle.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblResultsTitle.setText("PC Search Results");

        tblSearchResault.setAutoCreateRowSorter(true);
        tblSearchResault.setFont(new java.awt.Font("Times New Roman", 0, 24)); // NOI18N
        tblSearchResault.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "Name", "Description", "Install date", "Specification", "Warrenty End", "Status"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblSearchResault.setRowHeight(32);
        jScrollPane1.setViewportView(tblSearchResault);
        tblSearchResault.getTableHeader().setFont(new Font("Times New Roman", Font.BOLD, 24));

        lblResultFilterBy.setBackground(java.awt.Color.white);
        lblResultFilterBy.setFont(new java.awt.Font("Times New Roman", 0, 24)); // NOI18N
        lblResultFilterBy.setText("Filter By:");

        cmbFltrField.setFont(new java.awt.Font("Times New Roman", 0, 24)); // NOI18N
        cmbFltrField.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Show All", "PC Name", "PC Description" }));
        cmbFltrField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbFltrFieldActionPerformed(evt);
            }
        });

        lblFilterStr.setFont(new java.awt.Font("Times New Roman", 0, 24)); // NOI18N
        lblFilterStr.setText("Filter String:");

        txtFilterStr.setFont(new java.awt.Font("Times New Roman", 0, 24)); // NOI18N
        txtFilterStr.setEnabled(false);
        txtFilterStr.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtFilterStrFocusLost(evt);
            }
        });
        txtFilterStr.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtFilterStrActionPerformed(evt);
            }
        });

        lblInstDateFilter.setBackground(java.awt.Color.white);
        lblInstDateFilter.setFont(new java.awt.Font("Times New Roman", 0, 24)); // NOI18N
        lblInstDateFilter.setText("Intalation Date:");

        cmbInstDateFilterMode.setFont(new java.awt.Font("Times New Roman", 0, 24)); // NOI18N
        cmbInstDateFilterMode.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "All", "After", "Before" }));
        cmbInstDateFilterMode.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbInstDateFilterModeActionPerformed(evt);
            }
        });

        dtpInstalDateFilter.setEnabled(false);
        dtpInstalDateFilter.setFont(new java.awt.Font("Times New Roman", 0, 24)); // NOI18N
        dtpInstalDateFilter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dtpInstalDateFilterActionPerformed(evt);
            }
        });

        lblSpecificationNameFilter.setBackground(java.awt.Color.white);
        lblSpecificationNameFilter.setFont(new java.awt.Font("Times New Roman", 0, 24)); // NOI18N
        lblSpecificationNameFilter.setText("Specification:");

        cmbSpecificationNameFilter.setFont(new java.awt.Font("Times New Roman", 0, 24)); // NOI18N
        cmbSpecificationNameFilter.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Show All" }));
        cmbSpecificationNameFilter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbSpecificationNameFilterActionPerformed(evt);
            }
        });

        chbExpiredOnly.setFont(new java.awt.Font("Times New Roman", 0, 24)); // NOI18N
        chbExpiredOnly.setText("Expired Warrenty Only");
        chbExpiredOnly.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chbExpiredOnlyActionPerformed(evt);
            }
        });

        chbEnabledOnly.setFont(new java.awt.Font("Times New Roman", 0, 24)); // NOI18N
        chbEnabledOnly.setText("Show Enabled Only");
        chbEnabledOnly.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chbEnabledOnlyActionPerformed(evt);
            }
        });

        btnClose.setFont(new java.awt.Font("Times New Roman", 1, 24)); // NOI18N
        btnClose.setForeground(java.awt.Color.red);
        btnClose.setToolTipText("Close screen and return to Manage Workstations screen");
        btnClose.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        btnClose.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        btnClose.setInheritsPopupMenu(true);
        btnClose.setLabel("Close");
        btnClose.setName("btnClose"); // NOI18N
        btnClose.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCloseActionPerformed(evt);
            }
        });

        btnQuit.setFont(new java.awt.Font("Times New Roman", 1, 24)); // NOI18N
        btnQuit.setForeground(java.awt.Color.red);
        btnQuit.setText("Quit");
        btnQuit.setToolTipText("Quit PCNM");
        btnQuit.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        btnQuit.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        btnQuit.setInheritsPopupMenu(true);
        btnQuit.setName("btnQuit"); // NOI18N
        btnQuit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnQuitActionPerformed(evt);
            }
        });

        btnNewPC.setFont(new java.awt.Font("Times New Roman", 1, 24)); // NOI18N
        btnNewPC.setText("New PC");
        btnNewPC.setToolTipText("Add new workstation");
        btnNewPC.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        btnNewPC.setMaximumSize(new java.awt.Dimension(99, 33));
        btnNewPC.setMinimumSize(new java.awt.Dimension(99, 33));
        btnNewPC.setPreferredSize(new java.awt.Dimension(99, 33));
        btnNewPC.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNewPCActionPerformed(evt);
            }
        });

        btnViewPC.setFont(new java.awt.Font("Times New Roman", 1, 24)); // NOI18N
        btnViewPC.setText("View Selected PC");
        btnViewPC.setToolTipText("Add new workstation");
        btnViewPC.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        btnViewPC.setMaximumSize(new java.awt.Dimension(99, 33));
        btnViewPC.setMinimumSize(new java.awt.Dimension(99, 33));
        btnViewPC.setPreferredSize(new java.awt.Dimension(99, 33));
        btnViewPC.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnViewPCActionPerformed(evt);
            }
        });

        btnUpdatePC.setFont(new java.awt.Font("Times New Roman", 1, 24)); // NOI18N
        btnUpdatePC.setText("Update Selected PC");
        btnUpdatePC.setToolTipText("Add new workstation");
        btnUpdatePC.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        btnUpdatePC.setMaximumSize(new java.awt.Dimension(99, 33));
        btnUpdatePC.setMinimumSize(new java.awt.Dimension(99, 33));
        btnUpdatePC.setPreferredSize(new java.awt.Dimension(99, 33));
        btnUpdatePC.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdatePCActionPerformed(evt);
            }
        });

        btnMapPC.setFont(new java.awt.Font("Times New Roman", 1, 24)); // NOI18N
        btnMapPC.setText("Selected PC Mapping");
        btnMapPC.setToolTipText("Add new workstation");
        btnMapPC.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        btnMapPC.setMaximumSize(new java.awt.Dimension(99, 33));
        btnMapPC.setMinimumSize(new java.awt.Dimension(99, 33));
        btnMapPC.setPreferredSize(new java.awt.Dimension(99, 33));
        btnMapPC.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnMapPCActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblResultsTitle, javax.swing.GroupLayout.DEFAULT_SIZE, 1422, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(lblInstDateFilter)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cmbInstDateFilterMode, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(dtpInstalDateFilter, javax.swing.GroupLayout.PREFERRED_SIZE, 195, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(lblSpecificationNameFilter)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cmbSpecificationNameFilter, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(chbExpiredOnly)
                        .addGap(18, 18, 18)
                        .addComponent(chbEnabledOnly)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(lblResultFilterBy)
                        .addGap(60, 60, 60)
                        .addComponent(cmbFltrField, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(lblFilterStr)
                        .addGap(18, 18, 18)
                        .addComponent(txtFilterStr, javax.swing.GroupLayout.PREFERRED_SIZE, 843, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnClose, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnNewPC, javax.swing.GroupLayout.PREFERRED_SIZE, 233, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(btnViewPC, javax.swing.GroupLayout.PREFERRED_SIZE, 233, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(btnUpdatePC, javax.swing.GroupLayout.PREFERRED_SIZE, 233, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(btnMapPC, javax.swing.GroupLayout.PREFERRED_SIZE, 233, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(94, 94, 94)
                        .addComponent(btnQuit, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane1))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblResultsTitle)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblResultFilterBy)
                    .addComponent(cmbFltrField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblFilterStr)
                    .addComponent(txtFilterStr, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblInstDateFilter)
                    .addComponent(cmbInstDateFilterMode, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(dtpInstalDateFilter, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblSpecificationNameFilter)
                    .addComponent(cmbSpecificationNameFilter, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(chbEnabledOnly)
                    .addComponent(chbExpiredOnly))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 544, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnClose, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnQuit, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnNewPC, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnViewPC, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnUpdatePC, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnMapPC, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        cmbFltrField.setSelectedIndex(fltrField);
        if (fltrField == 0) txtFilterStr.setEnabled(false);
        else txtFilterStr.setEnabled(true);
        txtFilterStr.setText(fltrStirng);
        cmbInstDateFilterMode.setSelectedIndex(fltrInstDateMode);
        dtpInstalDateFilter.setFormats(new SimpleDateFormat( "dd/MM/yyyy" ));
        if (fltrInstDate != null) dtpInstalDateFilter.setDate(fltrInstDate);
        else dtpInstalDateFilter.setDate(new Date());

        chbExpiredOnly.setSelected(fltrExpired);
        chbEnabledOnly.setSelected(fltrEnabled);
        if (PCNMClientStart.user.getType() == EmpType.TECHNICIAN)
        btnMapPC.setEnabled(false);
    }// </editor-fold>//GEN-END:initComponents

    private void cmbFltrFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbFltrFieldActionPerformed
        if (doneInit) {
            fltrField = cmbFltrField.getSelectedIndex();
            if (fltrField == 0)
                txtFilterStr.setEnabled(false);
            else {
                txtFilterStr.setEnabled(true);
                fltrStirng = txtFilterStr.getText();
                if (fltrStirng == null) fltrStirng = "";
            }
            applyFilter();
        }
    }//GEN-LAST:event_cmbFltrFieldActionPerformed

    private void txtFilterStrFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtFilterStrFocusLost
        if (doneInit) {
            fltrStirng = txtFilterStr.getText();
            if (fltrStirng == null) fltrStirng = "";
            applyFilter();
        }
    }//GEN-LAST:event_txtFilterStrFocusLost

    private void txtFilterStrActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtFilterStrActionPerformed
        if (doneInit) {
            fltrStirng = txtFilterStr.getText();
            if (fltrStirng == null) fltrStirng = "";
            applyFilter();
        }
    }//GEN-LAST:event_txtFilterStrActionPerformed

    private void cmbInstDateFilterModeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbInstDateFilterModeActionPerformed
        if (doneInit) {
            fltrInstDateMode = cmbInstDateFilterMode.getSelectedIndex();
            if (fltrInstDateMode == 0)
                dtpInstalDateFilter.setEnabled(false);
            else {
                dtpInstalDateFilter.setEnabled(true);
                fltrInstDate = dtpInstalDateFilter.getDate();
            }
            applyFilter();
        }
    }//GEN-LAST:event_cmbInstDateFilterModeActionPerformed

    private void dtpInstalDateFilterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dtpInstalDateFilterActionPerformed
        if (!doneInit) return;
        fltrInstDate = dtpInstalDateFilter.getDate();
        applyFilter();
    }//GEN-LAST:event_dtpInstalDateFilterActionPerformed

    private void cmbSpecificationNameFilterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbSpecificationNameFilterActionPerformed
        if (doneInit) {
            fltrSpecIndex = cmbSpecificationNameFilter.getSelectedIndex();
            fltrSpec = String.valueOf(cmbSpecificationNameFilter.getSelectedItem());
            applyFilter();
        }
    }//GEN-LAST:event_cmbSpecificationNameFilterActionPerformed

    private void chbExpiredOnlyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chbExpiredOnlyActionPerformed
        if (doneInit) {
            fltrExpired = chbExpiredOnly.isSelected();
            applyFilter();
        }
    }//GEN-LAST:event_chbExpiredOnlyActionPerformed

    private void chbEnabledOnlyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chbEnabledOnlyActionPerformed
        if (!doneInit) return;
        fltrEnabled = chbEnabledOnly.isSelected();
        applyFilter();
    }//GEN-LAST:event_chbEnabledOnlyActionPerformed

    private void btnCloseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCloseActionPerformed
        doneInit = false;
        try {
            PCCTRL.searchResaultCloseBtnPressed();
        } catch (IOException ex) {
            showDialog(this, "Lost Connection with the server", DialogType.ERROR);
            System.exit(0);
        }
    }//GEN-LAST:event_btnCloseActionPerformed

    private void btnQuitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnQuitActionPerformed
        PCCTRL.QuitBtnPressed();
    }//GEN-LAST:event_btnQuitActionPerformed

    private void btnNewPCActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNewPCActionPerformed
        formMode = 1;
        onScreenPCID = 0;
        pcPropertiesClearFields();
        pcPropertiesForm = new FormFrame();
        pcPropertiesForm.setSize(pnlPCProperties.getMinimumSize());
        pcPropertiesForm.setLocationRelativeTo(null);
        lblPCPropertiesTitle.setText("Add New PC");
        pcPropertiesForm.getContentPane().add(pnlPCProperties);
        pcPropertiesForm.addWindowListener(exitListener);
        pcPropertiesForm.getContentPane().setVisible(true);
        PCNMClientStart.appWindow.setEnabled(false);
        pcPropertiesForm.setVisible(true);
    }//GEN-LAST:event_btnNewPCActionPerformed

    private void btnViewPCActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnViewPCActionPerformed
        selectedRow = tblSearchResault.getSelectedRow();
        if (selectedRow == -1) {
            showDialog(this, "Please select PC", DialogType.INFO);
            return;
        }
        formMode = 3;
        int index = getIDByName(tblSearchResault.convertRowIndexToModel(selectedRow));
        onScreenPCID = Integer.parseInt(tableContent[index][0]);
        txtPCPropertiesName.setText(tableContent[index][1]);
        txtPCPropertiesName.setEditable(false);
        txtPCPropertiesDescription.setText(tableContent[index][2]);
        txtPCPropertiesDescription.setEditable(false);
        Calendar cal = Calendar.getInstance();
        String[] parsedInstDate = tableContent[index][3].split("/");
        cal.set(Integer.parseInt(parsedInstDate[2]), Integer.parseInt(parsedInstDate[1]) - 1, Integer.parseInt(parsedInstDate[0]));
        dtpPCPropertiesInstalDate.setDate(cal.getTime());
        dtpPCPropertiesInstalDate.setEditable(false);
        int specSelectedIndex = getSpecIndex(tableContent[index][5]);
        cmbPCPropertiesSpec.setSelectedIndex(specSelectedIndex);
        cmbPCPropertiesSpec.setEnabled(false);
        txtPCPropertiesSpecScore.setText(tableContent[index][10]);
        txtPCPropertiesSpecPrtice.setText(tableContent[index][9]);
        txtPCPropertiesSpecWarrenty.setText(tableContent[index][8]);
        int statusSelecetdIndex = 0;
        switch (tableContent[index][4]) {
            case "Enabled":
                statusSelecetdIndex = 1;
                break;
            case "Disabled":
                statusSelecetdIndex = 2;
                break;
            case "Suspended":
                statusSelecetdIndex = 3;
                break;
        }
        cmbPCPropertiesStatus.setSelectedIndex(statusSelecetdIndex);
        cmbPCPropertiesStatus.setEnabled(false);
        
        pcPropertiesForm = new FormFrame();
        pcPropertiesForm.setSize(pnlPCProperties.getMinimumSize());
        pcPropertiesForm.setLocationRelativeTo(null);
        lblPCPropertiesTitle.setText("View PC Properties");
        pcPropertiesForm.getContentPane().add(pnlPCProperties);
        pcPropertiesForm.addWindowListener(exitListener);
        pcPropertiesForm.getContentPane().setVisible(true);
        PCNMClientStart.appWindow.setEnabled(false);
        pcPropertiesForm.setVisible(true);
    }//GEN-LAST:event_btnViewPCActionPerformed

    private void btnUpdatePCActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdatePCActionPerformed
        selectedRow = tblSearchResault.getSelectedRow();
        if (selectedRow == -1) {
            showDialog(this, "Please select PC", DialogType.INFO);
            return;
        }
        formMode = 2;
        int index = getIDByName(tblSearchResault.convertRowIndexToModel(selectedRow));
        onScreenPCID = Integer.parseInt(tableContent[index][0]);
        txtPCPropertiesName.setText(tableContent[index][1]);
        txtPCPropertiesDescription.setText(tableContent[index][2]);
        Calendar cal = Calendar.getInstance();
        String[] parsedInstDate = tableContent[index][3].split("/");
        cal.set(Integer.parseInt(parsedInstDate[2]), Integer.parseInt(parsedInstDate[1]) - 1, Integer.parseInt(parsedInstDate[0]));
        dtpPCPropertiesInstalDate.setDate(cal.getTime());
        dtpPCPropertiesInstalDate.getMonthView().setUpperBound(new Date());
        int specSelectedIndex = getSpecIndex(tableContent[index][5]);
        cmbPCPropertiesSpec.setSelectedIndex(specSelectedIndex);
        txtPCPropertiesSpecScore.setText(tableContent[index][10]);
        txtPCPropertiesSpecPrtice.setText(tableContent[index][9]);
        txtPCPropertiesSpecWarrenty.setText(tableContent[index][8]);
        int statusSelecetdIndex = 0;
        switch (tableContent[index][4]) {
            case "Enabled":
                statusSelecetdIndex = 1;
                break;
            case "Disabled":
                statusSelecetdIndex = 2;
                break;
            case "Suspended":
                statusSelecetdIndex = 3;
                break;
        }
        cmbPCPropertiesStatus.setSelectedIndex(statusSelecetdIndex);
        
        pcPropertiesForm = new FormFrame();
        pcPropertiesForm.setSize(pnlPCProperties.getMinimumSize());
        pcPropertiesForm.setLocationRelativeTo(null);
        lblPCPropertiesTitle.setText("Update PC Properties");
        pcPropertiesForm.getContentPane().add(pnlPCProperties);
        pcPropertiesForm.addWindowListener(exitListener);
        pcPropertiesForm.getContentPane().setVisible(true);
        PCNMClientStart.appWindow.setEnabled(false);
        pcPropertiesForm.setVisible(true);
    }//GEN-LAST:event_btnUpdatePCActionPerformed

    private void btnMapPCActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnMapPCActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_btnMapPCActionPerformed

    private void btnPCPropertiesOKActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPCPropertiesOKActionPerformed
        String name = txtPCPropertiesName.getText();
        String description = txtPCPropertiesDescription.getText();
        Date instDate = dtpPCPropertiesInstalDate.getDate();
        int selectedSpec = cmbPCPropertiesSpec.getSelectedIndex() - 1;
        String status = (String)cmbPCPropertiesStatus.getSelectedItem();
        if (name.isEmpty() || description.isEmpty() || selectedSpec == -1 || status.equals("Select Status")) {
            showDialog(pnlPCProperties, "All fields are mandatory.", DialogType.INFO);
            return;
        }
        String[] spec = enaSpec.get(selectedSpec);
        
        try {
            if (formMode != 3 && !PCCTRL.isNameUnique(onScreenPCID, name)) {
                showDialog(pnlPCProperties, "PC Name must be unique.", DialogType.INFO);
                return;
            }
        } catch (IOException ex) {
            showDialog(pnlPCProperties, ex.getMessage(), DialogType.ERROR);
            System.exit(0);
        }
        try {
            if (formMode == 1) {
                PCCTRL.AddPCBtnPressed(name, description, instDate, spec, status);
            }
            else if (formMode == 2) {
                PCCTRL.UpdatePCBtnPressed(onScreenPCID ,name, description, instDate, spec, status);
            } else if (formMode == 3) {
                pcPropertiesClearFields();
                pcPropertiesForm.dispose();
                PCNMClientStart.appWindow.setEnabled(true);
                PCNMClientStart.appWindow.requestFocus();
            }
        } catch (IOException ex) {
            showDialog(pnlPCProperties, "Lost Connection with the server", DialogType.ERROR);
            System.exit(0);
        }
        pcPropertiesClearFields();
        pcPropertiesForm.dispose();
        PCNMClientStart.appWindow.setEnabled(true);
        PCNMClientStart.appWindow.requestFocus();
    }//GEN-LAST:event_btnPCPropertiesOKActionPerformed

    private void btnPCPropertiesComponentsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPCPropertiesComponentsActionPerformed
        try {
            PCCTRL.getPCComp(onScreenPCID);
        } catch (IOException e) {
            showDialog(pnlPCProperties, "Lost Connection with the server", DialogType.ERROR);
            System.exit(0);
        }
        pcCompForm = new FormFrame();
        pcCompForm.setSize(pnlPCComp.getMinimumSize());
        pcCompForm.setLocationRelativeTo(null);
        pcCompForm.getContentPane().add(pnlPCComp);
        pcCompForm.addWindowListener(exitListener1);
        pcCompForm.getContentPane().setVisible(true);
        pcPropertiesForm.setEnabled(false);
        pcCompForm.setVisible(true);
    }//GEN-LAST:event_btnPCPropertiesComponentsActionPerformed

    private void btnPCPropertiesCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPCPropertiesCancelActionPerformed
        pcPropertiesClearFields();
        pcPropertiesForm.dispose();
        PCNMClientStart.appWindow.setEnabled(true);
        PCNMClientStart.appWindow.requestFocus();
    }//GEN-LAST:event_btnPCPropertiesCancelActionPerformed

    private void cmbPCPropertiesStatusActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbPCPropertiesStatusActionPerformed
        int selected = cmbPCPropertiesStatus.getSelectedIndex();
        setStatusExplanation(selected);
    }//GEN-LAST:event_cmbPCPropertiesStatusActionPerformed

    private void cmbPCPropertiesSpecActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbPCPropertiesSpecActionPerformed
        int selected = cmbPCPropertiesSpec.getSelectedIndex();
        if (selected == -1) return;
        if (selected == 0) {
            txtPCPropertiesSpecScore.setText("");
            txtPCPropertiesSpecPrtice.setText("");
            txtPCPropertiesSpecWarrenty.setText("");
            return;
        }
        selected --;
        txtPCPropertiesSpecScore.setText(enaSpec.get(selected)[5]);
        txtPCPropertiesSpecPrtice.setText(enaSpec.get(selected)[4]);
        txtPCPropertiesSpecWarrenty.setText(enaSpec.get(selected)[3]);
    }//GEN-LAST:event_cmbPCPropertiesSpecActionPerformed

    private void btnPCCompInstCompActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPCCompInstCompActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_btnPCCompInstCompActionPerformed

    private void btnPCCompUninstCompActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPCCompUninstCompActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_btnPCCompUninstCompActionPerformed

    private void btnPCCompCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPCCompCancelActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_btnPCCompCancelActionPerformed

    private void btnPCCompApplyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPCCompApplyActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_btnPCCompApplyActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnClose;
    private javax.swing.JButton btnMapPC;
    private javax.swing.JButton btnNewPC;
    private javax.swing.JButton btnPCCompApply;
    private javax.swing.JButton btnPCCompCancel;
    private javax.swing.JButton btnPCCompInstComp;
    private javax.swing.JButton btnPCCompUninstComp;
    private javax.swing.JButton btnPCPropertiesCancel;
    private javax.swing.JButton btnPCPropertiesComponents;
    private javax.swing.JButton btnPCPropertiesOK;
    private javax.swing.JButton btnQuit;
    private javax.swing.JButton btnUpdatePC;
    private javax.swing.JButton btnViewPC;
    private javax.swing.JCheckBox chbEnabledOnly;
    private javax.swing.JCheckBox chbExpiredOnly;
    private javax.swing.JComboBox cmbFltrField;
    private javax.swing.JComboBox cmbInstDateFilterMode;
    private javax.swing.JComboBox cmbPCPropertiesSpec;
    private javax.swing.JComboBox cmbPCPropertiesStatus;
    private javax.swing.JComboBox cmbSpecificationNameFilter;
    private org.jdesktop.swingx.JXDatePicker dtpInstalDateFilter;
    private org.jdesktop.swingx.JXDatePicker dtpPCPropertiesInstalDate;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JLabel lbPCCompDescription;
    private javax.swing.JLabel lbPCCompName;
    private javax.swing.JLabel lblFilterStr;
    private javax.swing.JLabel lblInstDateFilter;
    private javax.swing.JLabel lblPCCompEnaComp;
    private javax.swing.JLabel lblPCCompInstComp;
    private javax.swing.JLabel lblPCCompPCScore;
    private javax.swing.JLabel lblPCCompScoreVal;
    private javax.swing.JLabel lblPCCompSpecName;
    private javax.swing.JLabel lblPCCompStatus;
    private javax.swing.JLabel lblPCCompTitle;
    private javax.swing.JLabel lblPCCompWarrenty;
    private javax.swing.JLabel lblPCPropertiesDescription;
    private javax.swing.JLabel lblPCPropertiesInstDate;
    private javax.swing.JLabel lblPCPropertiesInstDate1;
    private javax.swing.JLabel lblPCPropertiesName;
    private javax.swing.JLabel lblPCPropertiesSpec;
    private javax.swing.JLabel lblPCPropertiesSpec1;
    private javax.swing.JLabel lblPCPropertiesSpecPrice;
    private javax.swing.JLabel lblPCPropertiesSpecScore;
    private javax.swing.JLabel lblPCPropertiesSpecWarrenty;
    private javax.swing.JLabel lblPCPropertiesStatus;
    private javax.swing.JLabel lblPCPropertiesStatusExplain;
    private javax.swing.JLabel lblPCPropertiesTitle;
    private javax.swing.JLabel lblResultFilterBy;
    private javax.swing.JLabel lblResultsTitle;
    private javax.swing.JLabel lblSpecificationNameFilter;
    private javax.swing.JPanel pnlPCComp;
    private javax.swing.JPanel pnlPCProperties;
    private javax.swing.JTable tblPCCompEnaComp;
    private javax.swing.JTable tblPCCompInstComp;
    private javax.swing.JTable tblSearchResault;
    private javax.swing.JTextField txtFilterStr;
    private javax.swing.JTextField txtPCCompDescription;
    private javax.swing.JTextField txtPCCompName;
    private javax.swing.JTextField txtPCCompSpecName;
    private javax.swing.JTextField txtPCCompStatus;
    private javax.swing.JTextField txtPCCompWarrenty;
    private javax.swing.JTextField txtPCPropertiesDescription;
    private javax.swing.JTextField txtPCPropertiesName;
    private javax.swing.JTextField txtPCPropertiesName3;
    private javax.swing.JTextField txtPCPropertiesName4;
    private javax.swing.JTextField txtPCPropertiesSpecPrtice;
    private javax.swing.JTextField txtPCPropertiesSpecScore;
    private javax.swing.JTextField txtPCPropertiesSpecWarrenty;
    // End of variables declaration//GEN-END:variables

    private void applyFilter() {
        Arrays.fill(rowsToShow, true);
        rowCounter = tableContent.length;
        Calendar cal = Calendar.getInstance();
        Date today = new Date();
        
        for (int i = 0 ; i < tableContent.length ; i ++) {
            String[] instDateString = tableContent[i][3].split("/");
            cal.set(Integer.parseInt(instDateString[2]), Integer.parseInt(instDateString[1]) - 1, Integer.parseInt(instDateString[0]));
            if (rowsToShow[i] && fltrField == 1 && !fltrStirng.isEmpty() && tableContent[i][1].toLowerCase().indexOf(fltrStirng.toLowerCase()) == -1) rowsToShow[i] = false;
            if (rowsToShow[i] && fltrField == 2 && !fltrStirng.isEmpty() && tableContent[i][2].toLowerCase().indexOf(fltrStirng.toLowerCase()) == -1) rowsToShow[i] = false;
            if (rowsToShow[i] && fltrInstDateMode == 1 && fltrInstDate.after(cal.getTime())) rowsToShow[i] = false;
            if (rowsToShow[i] && fltrInstDateMode == 2 && fltrInstDate.before(cal.getTime())) rowsToShow[i] = false;
            if (rowsToShow[i] && fltrSpecIndex != 0 && !tableContent[i][6].equals(fltrSpec)) rowsToShow[i] = false;
            cal.add(Calendar.MONTH, Integer.parseInt(tableContent[i][8]));
            if (rowsToShow[i] && fltrExpired && today.before(cal.getTime())) rowsToShow[i] = false;
            if (rowsToShow[i] && fltrEnabled && !tableContent[i][4].equals("Enabled")) rowsToShow[i] = false;
            if (!rowsToShow[i]) rowCounter --;
        }
        loadSearchResults();
    }

    private void loadSearchResults() {
        String[] row;
        Calendar cal = Calendar.getInstance();
        DateFormat df = new SimpleDateFormat("dd/MM/yyyy");
        DefaultTableModel dtm = (DefaultTableModel)tblSearchResault.getModel();
        dtm.setRowCount(rowCounter);
        int cur_row = 0;
        for (int i = 0 ; i < pc_tbl.size() ; i ++) {
            if (rowsToShow[i]) {
                row = pc_tbl.get(i).split(",");
                for (int j = 0 ; j < tableContent[i].length ; j ++)
                    tableContent[i][j] = new String(row[j]);
                dtm.setValueAt(tableContent[i][1], cur_row, 0);
                dtm.setValueAt(tableContent[i][2], cur_row, 1);
                dtm.setValueAt(tableContent[i][3], cur_row, 2);
                dtm.setValueAt(tableContent[i][6], cur_row, 3);
                String[] instDateString = tableContent[i][3].split("/");
                cal.set(Integer.parseInt(instDateString[2]), Integer.parseInt(instDateString[1]) - 1, Integer.parseInt(instDateString[0]));
                cal.add(Calendar.MONTH, Integer.parseInt(tableContent[i][8]));
                dtm.setValueAt(df.format(cal.getTime()), cur_row, 4);
                dtm.setValueAt(tableContent[i][4], cur_row, 5);
                cur_row ++;
                if (cur_row > rowCounter)
                    i = pc_tbl.size();
            }
        }
    }

    private void loadCmbSpecificationNameFilter() {
        specTableNames.clear();
        for (String[] tbl_row : tableContent) {
            if (!specTableNames.contains(tbl_row[6]))
                specTableNames.add(tbl_row[6]);
        }
        for (String specName : specTableNames)
            cmbSpecificationNameFilter.addItem(specName);
    }

    private void pcPropertiesClearFields() {
        txtPCPropertiesName.setText("");
        txtPCPropertiesName.setEditable(true);
        txtPCPropertiesDescription.setText("");
        txtPCPropertiesDescription.setEditable(true);
        dtpPCPropertiesInstalDate.setDate(new Date());
        dtpPCPropertiesInstalDate.setEditable(true);
        cmbPCPropertiesSpec.setSelectedIndex(0);
        cmbPCPropertiesSpec.setEnabled(true);
        txtPCPropertiesSpecScore.setText("");
        txtPCPropertiesSpecPrtice.setText("");
        txtPCPropertiesSpecWarrenty.setText("");
        cmbPCPropertiesStatus.setSelectedIndex(0);
        cmbPCPropertiesStatus.setEnabled(true);
        lblPCPropertiesStatusExplain.setText("");
    }
    
    private WindowListener exitListener = new WindowAdapter() {
            @Override
            public void windowClosing(WindowEvent e) {
                pcPropertiesClearFields();
                pcPropertiesForm.dispose();
                PCNMClientStart.appWindow.setEnabled(true);
                PCNMClientStart.appWindow.requestFocus();
            }
        };

    private WindowListener exitListener1 = new WindowAdapter() {
            @Override
            public void windowClosing(WindowEvent e) {
                pcCompForm.dispose();
                pcPropertiesForm.setEnabled(true);
                pcPropertiesForm.requestFocus();
            }
        };
    
    private void loadEnaSpec() {
        ArrayList<String>rows = PCCTRL.getEnaSpecStringArr();
        for (String row : rows)
            enaSpec.add(row.split(","));
    }

    private int getIDByName(int row) {
        DefaultTableModel dtm = (DefaultTableModel)tblSearchResault.getModel();
        String name = (String)dtm.getValueAt(row, 0);
        for (int i = 0 ; i < tableContent.length ; i ++)
            if (name.equals(tableContent[i][1]))
                return i;
        return -1;
    }

    private int getSpecIndex(String specID) {
        for (int i = 0 ; i < enaSpec.size() ; i ++)
            if (enaSpec.get(i)[0].equals(specID))
                return i + 1;
        return -1;
    }

    private void setStatusExplanation(int selected) {
        switch (selected) {
            case 0:
                lblPCPropertiesStatusExplain.setText("");
                break;
            case 1:
                lblPCPropertiesStatusExplain.setText("This PC is ready for work");
                break;
            case 2:
                lblPCPropertiesStatusExplain.setText("This PC is not Active");
                break;
            case 3:
                lblPCPropertiesStatusExplain.setText("This PC is in stock");
                break;
        }
    }
    
    private ListSelectionListener tblPCCompEnaCompListListener = new ListSelectionListener() {
        @Override
        public void valueChanged(ListSelectionEvent lse) {
            if (!doneInit || lse.getValueIsAdjusting()) return;
            ListSelectionModel lsm = (ListSelectionModel)lse.getSource();
            if (lsm.isSelectionEmpty())
                return;
            Arrays.fill(selectedEnaComps, false);
            int minIndex = lsm.getMinSelectionIndex();
            int maxIndex = lsm.getMaxSelectionIndex();
            DefaultTableModel dtm = (DefaultTableModel)tblPCCompEnaComp.getModel();
            for (int i = minIndex ; i <= maxIndex ; i ++) {
                if (lsm.isSelectedIndex(i)) {
                    String name = (String)dtm.getValueAt(tblPCCompEnaComp.convertRowIndexToModel(i), 0);
                    for (int j = 0 ; j < enaCompTableContent.length ; j ++) {
                        if (enaCompTableContent[j][1].equals(name)) {
                            selectedEnaComps[j] = true;
                            j = enaCompTableContent.length;
                        }
                    }
                }
            }
        }
    };
    
    private ListSelectionListener tblPCCompInstCompListListener = new ListSelectionListener() {
        @Override
        public void valueChanged(ListSelectionEvent lse) {
            if (!doneInit || lse.getValueIsAdjusting()) return;
            ListSelectionModel lsm = (ListSelectionModel)lse.getSource();
            if (lsm.isSelectionEmpty())
                return;
            Arrays.fill(selectedInstComps, false);
            int minIndex = lsm.getMinSelectionIndex();
            int maxIndex = lsm.getMaxSelectionIndex();
            DefaultTableModel dtm = (DefaultTableModel)tblPCCompInstComp.getModel();
            for (int i = minIndex ; i <= maxIndex ; i ++) {
                if (lsm.isSelectedIndex(i)) {
                    String name = (String)dtm.getValueAt(tblPCCompInstComp.convertRowIndexToModel(i), 0);
                    for (int j = 0 ; j < instCompTableContent.length ; j ++) {
                        if (instCompTableContent[j][1].equals(name)) {
                            selectedInstComps[j] = true;
                            j = instCompTableContent.length;
                        }
                    }
                }
            }
        }
    };
    
    private void loadEnaComp() {
        String row;
        DefaultTableModel dtm = (DefaultTableModel)tblPCCompEnaComp.getModel();
        dtm.setRowCount(enaCompRowCounter);
        for (int i = 0 ; i < compEnaList.size() ; i ++) {
            row = compEnaList.get(i);
            enaCompTableContent[i] = row.split(",");
            dtm.setValueAt(enaCompTableContent[i][1], i, 0);
            dtm.setValueAt(enaCompTableContent[i][2], i, 1);
            dtm.setValueAt(Float.parseFloat(enaCompTableContent[i][3]), i, 2);
            dtm.setValueAt(Float.parseFloat(enaCompTableContent[i][4]), i, 3);
        }
        DefaultTableCellRenderer leftRenderer = new DefaultTableCellRenderer();
        leftRenderer.setHorizontalAlignment(JLabel.LEFT);
        tblPCCompEnaComp.getColumnModel().getColumn(2).setCellRenderer(leftRenderer);
        tblPCCompEnaComp.getColumnModel().getColumn(3).setCellRenderer(leftRenderer);
    }
    
    private void loadInstComp() {
        String row;
        DefaultTableModel dtm = (DefaultTableModel)tblPCCompInstComp.getModel();
        dtm.setRowCount(instCompRowCounter);
        for (int i = 0 ; i < compInstList.size() ; i ++) {
            row = compInstList.get(i);
            instCompTableContent[i] = row.split(",");
            dtm.setValueAt(instCompTableContent[i][1], i, 0);
            dtm.setValueAt(instCompTableContent[i][2], i, 1);
            dtm.setValueAt(Float.parseFloat(instCompTableContent[i][3]), i, 2);
            dtm.setValueAt(Float.parseFloat(instCompTableContent[i][4]), i, 3);
        }
        DefaultTableCellRenderer leftRenderer = new DefaultTableCellRenderer();
        leftRenderer.setHorizontalAlignment(JLabel.LEFT);
        tblPCCompInstComp.getColumnModel().getColumn(2).setCellRenderer(leftRenderer);
        tblPCCompInstComp.getColumnModel().getColumn(3).setCellRenderer(leftRenderer);
    }
}
